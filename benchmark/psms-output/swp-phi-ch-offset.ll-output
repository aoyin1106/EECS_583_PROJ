SU(0):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%1
    SU(2): Anti Latency=1
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(11): Data Latency=0 Reg=%2
    SU(11): Anti Latency=1
SU(2):   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
  Successors:
    SU(7): Data Latency=1 Reg=%9
    SU(6): Data Latency=1 Reg=%9
SU(3):   %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Successors:
    SU(5): Data Latency=1 Reg=%12
    SU(4): Data Latency=1 Reg=%12
    SU(11): Anti Latency=0
SU(4):   %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%12
  Successors:
    SU(6): Data Latency=1 Reg=%15
SU(5):   %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(3): Data Latency=1 Reg=%12
  Successors:
    SU(7): Data Latency=1 Reg=%16
SU(6):   %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%15
    SU(2): Data Latency=1 Reg=%9
  Successors:
    SU(8): Data Latency=1 Reg=%18
SU(7):   %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(5): Data Latency=1 Reg=%16
    SU(2): Data Latency=1 Reg=%9
  Successors:
    SU(9): Data Latency=1 Reg=%19
SU(8):   %20:intregs = S2_vtrunehb %18:doubleregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(6): Data Latency=1 Reg=%18
  Successors:
    SU(10): Data Latency=1 Reg=%20
SU(9):   %21:intregs = S2_vtrunehb %19:doubleregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%19
  Successors:
    SU(10): Data Latency=1 Reg=%21
SU(10):   %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(9): Data Latency=1 Reg=%21
    SU(8): Data Latency=1 Reg=%20
  Successors:
    SU(11): Data Latency=0 Reg=%27
SU(11):   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(10): Data Latency=0 Reg=%27
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
    SU(3): Anti Latency=0
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %20:intregs = S2_vtrunehb %18:doubleregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %21:intregs = S2_vtrunehb %19:doubleregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:3
MII = 3 MAX_II = 13 (rec=1, res=3)
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
SU(3):   %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)
SU(5):   %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs
SU(0):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
SU(2):   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
SU(7):   %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs
SU(9):   %21:intregs = S2_vtrunehb %19:doubleregs
SU(4):   %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs
SU(6):   %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs
SU(8):   %20:intregs = S2_vtrunehb %18:doubleregs
SU(10):   %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi
SU(11):   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 1
	Node 4:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 3
	   ZLD  = 0
	   ZLH  = 0
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 3
	   ZLD  = 0
	   ZLH  = 0
	Node 6:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 7:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 8:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 9:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 10:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 4
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 11:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 4
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
   SU(2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

  Rec NodeSet Num nodes 2 rec 1 mov 4 depth 4 col 0
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
   SU(11) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
   SU(2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

  NodeSet Num nodes 7 rec 1 mov 4 depth 4 col 0
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
   SU(11) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)
   SU(10) %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi
   SU(9) %21:intregs = S2_vtrunehb %19:doubleregs
   SU(7) %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs
   SU(8) %20:intregs = S2_vtrunehb %18:doubleregs
   SU(6) %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs

  NodeSet Num nodes 3 rec 0 mov 0 depth 0 col 0
   SU(3) %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)
   SU(5) %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs
   SU(4) %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs

NodeSet size 2
  Bottom up (default) 2 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 7
  Top down (succs) 7 6 9 8 10 11 1 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 3
  Bottom up (preds) 5 4 3 
   Switching order to top down 
Done with Nodeset
Node order:  2  0  7  6  9  8  10  11  1  5  4  3 
Try to schedule with 3

Inst (2)   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 2 II: 3
	insert at cycle 0   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

Inst (0)   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

	es: fffffffe ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

Inst (7)   %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 3 II: 3
	insert at cycle 1   %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs

Inst (6)   %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 3 II: 3
	insert at cycle 2   %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs

Inst (9)   %21:intregs = S2_vtrunehb %19:doubleregs

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 4 II: 3
	insert at cycle 2   %21:intregs = S2_vtrunehb %19:doubleregs

Inst (8)   %20:intregs = S2_vtrunehb %18:doubleregs

	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 5 II: 3
	insert at cycle 3   %20:intregs = S2_vtrunehb %18:doubleregs

Inst (10)   %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 6 II: 3
	insert at cycle 4   %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi

Inst (11)   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 6 II: 3
	insert at cycle 4   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)

Inst (1)   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

	es:        2 ls:        4 me: 7fffffff ms: 80000000
Trying to insert node between 4 and 2 II: 3
	insert at cycle 4   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

Inst (5)   %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle 0   %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs

Inst (4)   %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 1   %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs

Inst (3)   %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -1   %12:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v110)
Schedule Found? 1 (II=3)
cycle -1 (0) (0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

cycle -1 (1) (6) %18:doubleregs = M5_vmacbsu %15:doubleregs(tied-def 0), %9.isub_lo:doubleregs, %17:intregs

cycle -1 (1) (9) %21:intregs = S2_vtrunehb %19:doubleregs

cycle -1 (0) (3) %12 = UNKNOWN %2, 8 :: (load (s64) from %ir.v110)

cycle 0 (1) (8) %20:intregs = S2_vtrunehb %18:doubleregs

cycle 0 (0) (2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

cycle 0 (0) (5) %16:doubleregs = S2_vzxtbh %12.isub_hi:doubleregs

cycle 1 (1) (1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

cycle 1 (1) (10) %27:doubleregs = REG_SEQUENCE %20:intregs, %subreg.isub_lo, %21:intregs, %subreg.isub_hi

cycle 1 (1) (11) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %27:doubleregs :: (store (s64) into %ir.v110)

cycle 1 (0) (7) %19:doubleregs = M5_vmacbsu %16:doubleregs(tied-def 0), %9.isub_hi:doubleregs, %17:intregs

cycle 1 (0) (4) %15:doubleregs = S2_vzxtbh %12.isub_lo:doubleregs

prolog:
bb.3.b2:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %28:doubleregs, %29:intregs = L2_loadrd_pi %7:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
  %30:doubleregs = L2_loadrd_io %8:intregs, 0 :: (load (s64) from %ir.v110)
  %31:doubleregs = S2_vzxtbh %30.isub_lo:doubleregs
  %32:doubleregs = S2_vzxtbh %30.isub_hi:doubleregs
  %33:doubleregs = M5_vmacbsu %32:doubleregs(tied-def 0), %28.isub_hi:doubleregs, %17:intregs
New block
bb.4.b2:
; predecessors: %bb.3, %bb.4
  successors: %bb.4(0x7c000000), %bb.1(0x04000000); %bb.4(96.88%), %bb.1(3.12%)

  %45:intregs = PHI %29:intregs, %bb.3, %39:intregs, %bb.4
  %46:intregs = PHI %8:intregs, %bb.3, %42:intregs, %bb.4
  %47:doubleregs = PHI %28:doubleregs, %bb.3, %38:doubleregs, %bb.4
  %48:doubleregs = PHI %31:doubleregs, %bb.3, %44:doubleregs, %bb.4
  %49:doubleregs = PHI %33:doubleregs, %bb.3, %43:doubleregs, %bb.4
  %34:doubleregs = M5_vmacbsu %48:doubleregs(tied-def 0), %47.isub_lo:doubleregs, %17:intregs
  %35:intregs = S2_vtrunehb %49:doubleregs
  %36:doubleregs = L2_loadrd_io %46:intregs, 8 :: (load unknown-size from %ir.v110, align 8)
  %37:intregs = S2_vtrunehb %34:doubleregs
  %38:doubleregs, %39:intregs = L2_loadrd_pi %45:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3 + 8)
  %40:doubleregs = S2_vzxtbh %36.isub_hi:doubleregs
  %41:doubleregs = REG_SEQUENCE %37:intregs, %subreg.isub_lo, %35:intregs, %subreg.isub_hi
  %42:intregs = S2_storerd_pi %46:intregs(tied-def 0), 8, %41:doubleregs :: (store (s64) into %ir.v110)
  %43:doubleregs = M5_vmacbsu %40:doubleregs(tied-def 0), %38.isub_hi:doubleregs, %17:intregs
  %44:doubleregs = S2_vzxtbh %36.isub_lo:doubleregs
  ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  J2_jump %bb.1, implicit-def dead $pc
epilog:
bb.5:
; predecessors: %bb.4
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %55:intregs = PHI %7:intregs, %bb.3, %45:intregs, %bb.4
  %56:intregs = PHI %8:intregs, %bb.3, %42:intregs, %bb.4
  %57:doubleregs = PHI %28:doubleregs, %bb.3, %38:doubleregs, %bb.4
  %58:doubleregs = PHI %31:doubleregs, %bb.3, %44:doubleregs, %bb.4
  %59:doubleregs = PHI %33:doubleregs, %bb.3, %43:doubleregs, %bb.4
  %50:doubleregs = M5_vmacbsu %58:doubleregs(tied-def 0), %57.isub_lo:doubleregs, %17:intregs
  %51:intregs = S2_vtrunehb %50:doubleregs
  %52:intregs = S2_vtrunehb %59:doubleregs
  %53:doubleregs = REG_SEQUENCE %51:intregs, %subreg.isub_lo, %52:intregs, %subreg.isub_hi
  %54:intregs = S2_storerd_pi %56:intregs(tied-def 0), 8, %53:doubleregs :: (store unknown-size into %ir.v110, align 8)
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r0 = ##g1
		r2 = ##g0
	}
	{
		loop0(.LBB0_1,#49)
		r1 = ##117901063
		r9:8 = memd(r0+#0)
	}
	{
		r7:6 = vzxtbh(r9)
		r9:8 = vzxtbh(r8)
		r5:4 = memd(r2++#8)
	}
	{
		r7:6 += vmpybsu(r5,r1)
	}
	.p2align	4
.LBB0_1:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r9:8 += vmpybsu(r4,r1)
		r13 = vtrunehb(r7:6)
		r15:14 = memd(r0+#8)
		r5:4 = memd(r2++#8)
	}
	{
		r12 = vtrunehb(r9:8)
		r7:6 = vzxtbh(r15)
	}
	{
		r7:6 += vmpybsu(r5,r1)
		r9:8 = vzxtbh(r14)
		memd(r0++#8) = r13:12
	} :endloop0
// %bb.2:
	{
		r9:8 += vmpybsu(r4,r1)
		r3 = vtrunehb(r7:6)
	}
	{
		r2 = vtrunehb(r9:8)
	}
	{
		jumpr r31
		memd(r0++#8) = r3:2
	}
.Ltmp0:                                 // Address of block that was removed by CodeGen
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.type	g0,@object                      // @g0
	.comm	g0,400,8
	.type	g1,@object                      // @g1
	.comm	g1,400,8
	.section	".note.GNU-stack","",@progbits
