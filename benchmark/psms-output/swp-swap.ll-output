SU(0):   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%2
    SU(5): Anti Latency=1
SU(1):   %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%3
    SU(4): Anti Latency=1
SU(2):   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(5): Data Latency=0 Reg=%14
    SU(5): Ord  Latency=0 Memory
    SU(4): Anti Latency=0
SU(3):   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%15
    SU(4): Ord  Latency=0 Memory
    SU(5): Anti Latency=0
SU(4):   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)
  # preds left       : 5
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=0 Reg=%15
    SU(3): Ord  Latency=0 Memory
    SU(1): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
    SU(2): Anti Latency=0
  Successors:
    SU(5): Ord  Latency=0 Memory
SU(5):   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)
  # preds left       : 6
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Ord  Latency=0 Memory
    SU(2): Data Latency=0 Reg=%14
    SU(2): Ord  Latency=0 Memory
    SU(0): Data Latency=0 Reg=%2
    SU(0): Anti Latency=1
    SU(3): Anti Latency=0
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(0):   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
SU(3):   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)
SU(1):   %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2
SU(2):   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
SU(4):   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)
SU(5):   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 0
	   ZLH  = 2
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 0
	   ZLH  = 2
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 1
	Node 5:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2
   SU(4) %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

  Rec NodeSet Num nodes 2 rec 0 mov 0 depth 1 col 0
   SU(2) %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
   SU(5) %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

  Rec NodeSet Num nodes 2 rec 0 mov 0 depth 1 col 0
   SU(3) %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)
   SU(4) %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

  NodeSet Num nodes 4 rec 1 mov 0 depth 1 col 0
   SU(1) %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2
   SU(4) %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)
   SU(2) %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)
   SU(3) %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)

NodeSet size 2
  Bottom up (default) 5 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 4
  Bottom up (preds) 4 2 3 1 
   Switching order to top down 
Done with Nodeset
Node order:  5  0  4  2  3  1 
Try to schedule with 2

Inst (5)   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

Inst (0)   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

Inst (4)   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

Inst (2)   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)

	es: 80000000 ls: ffffffff me: 7fffffff ms: ffffffff
Trying to insert node between -1 and -1 II: 2
	insert at cycle -1   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)

Inst (3)   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)

	es: 80000000 ls: ffffffff me: 7fffffff ms: ffffffff
Trying to insert node between -1 and -1 II: 2
	failed to insert at cycle -1   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)
	Can't schedule
Try to schedule with 3

Inst (5)   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 2 II: 3
	insert at cycle 0   %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

Inst (0)   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

	es: fffffffe ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

Inst (4)   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

Inst (2)   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)

	es: 80000000 ls: ffffffff me: 7fffffff ms: fffffffe
Trying to insert node between -1 and -2 II: 3
	insert at cycle -2   %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)

Inst (3)   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)

	es: 80000000 ls: ffffffff me: 7fffffff ms: fffffffe
Trying to insert node between -1 and -2 II: 3
	insert at cycle -1   %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)

Inst (1)   %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2

	es: fffffffd ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -2   %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2
Schedule Found? 1 (II=3)
cycle -2 (0) (1) %3:intregs = PHI %0:intregs, %bb.1, %6:intregs, %bb.2

cycle -2 (0) (2) %14:intregs = L2_loadri_io %3:intregs, 0 :: (load (s32) from %ir.lsr.iv, !tbaa !4)

cycle -1 (0) (0) %2:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

cycle -1 (0) (3) %15:intregs = L2_loadri_io %2:intregs, 0 :: (load (s32) from %ir.lsr.iv3, !tbaa !4)

cycle -1 (0) (4) %6:intregs = S2_storeri_pi %3:intregs(tied-def 0), 4, %15:intregs :: (store (s32) into %ir.lsr.iv, !tbaa !4)

cycle 0 (0) (5) %7:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %14:intregs :: (store (s32) into %ir.lsr.iv3, !tbaa !4)

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		p0 = cmp.gt(r2,#0)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %b1
	{
		loop0(.LBB0_2,r2)
		r3 = memw(gp+#g0)
	}
	{
		r0 = addasl(r3,r0,#2)
		r1 = addasl(r3,r1,#2)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_2:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r2 = memw(r0+#0)
		r3 = memw(r1+#0)
	}
	{
		memw(r0++#4) = r3
		memw(r1++#4) = r2
	} :endloop0
// %bb.3:                               // %b4
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.type	g0,@object                      // @g0
	.comm	g0,4,4
	.section	".note.GNU-stack","",@progbits
