SU(0):   %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(9): Data Latency=0 Reg=%10
    SU(4): Data Latency=0 Reg=%10
    SU(9): Anti Latency=1
SU(1):   %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=0 Reg=%12
    SU(8): Anti Latency=1
SU(2):   %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(3): Data Latency=0 Reg=%13
    SU(3): Anti Latency=1
SU(3):   %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(2): Data Latency=0 Reg=%13
    SU(2): Anti Latency=1
  Successors:
    SU(5): Data Latency=1 Reg=%27
SU(4):   %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
  Successors:
    SU(5): Data Latency=1 Reg=%28
SU(5):   %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%28
    SU(3): Data Latency=1 Reg=%27
  Successors:
    SU(7): Data Latency=1 Reg=%29
    SU(6): Data Latency=1 Reg=%29
SU(6):   %30:intregs = S2_extractu %29:intregs, 4, 2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%29
  Successors:
    SU(8): Data Latency=1 Reg=%30
SU(7):   %31:intregs = S2_extractu %29:intregs, 7, 5
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%29
  Successors:
    SU(8): Data Latency=1 Reg=%31
SU(8):   %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(7): Data Latency=1 Reg=%31
    SU(6): Data Latency=1 Reg=%30
    SU(1): Data Latency=0 Reg=%12
    SU(1): Anti Latency=1
SU(9):   %16:intregs = A2_add %10:intregs, %0:intregs
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%10
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.6, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %30:intregs = S2_extractu %29:intregs, 4, 2
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %31:intregs = S2_extractu %29:intregs, 7, 5
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %16:intregs = A2_add %10:intregs, %0:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(0):   %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6
SU(4):   %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)
SU(2):   %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6
SU(3):   %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)
SU(5):   %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs
SU(7):   %31:intregs = S2_extractu %29:intregs, 7, 5
SU(6):   %30:intregs = S2_extractu %29:intregs, 4, 2
SU(1):   %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6
SU(8):   %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs
SU(9):   %16:intregs = A2_add %10:intregs, %0:intregs
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 6:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 7:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 8:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 4
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 9:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(0) %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6
   SU(9) %16:intregs = A2_add %10:intregs, %0:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 4 col 0
   SU(1) %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6
   SU(8) %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(2) %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6
   SU(3) %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(2) %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6
   SU(3) %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)

  NodeSet Num nodes 5 rec 1 mov 3 depth 4 col 0
   SU(1) %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6
   SU(8) %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs
   SU(7) %31:intregs = S2_extractu %29:intregs, 7, 5
   SU(6) %30:intregs = S2_extractu %29:intregs, 4, 2
   SU(5) %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs

  NodeSet Num nodes 3 rec 1 mov 3 depth 1 col 0
   SU(0) %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6
   SU(9) %16:intregs = A2_add %10:intregs, %0:intregs
   SU(4) %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)

NodeSet size 2
  Bottom up (default) 3 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 5
  Top down (succs) 5 7 6 8 1 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 3
  Bottom up (preds) 4 0 9 
   Switching order to top down 
Done with Nodeset
Node order:  3  2  5  7  6  8  1  4  0  9 
Try to schedule with 2

Inst (3)   %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)

Inst (2)   %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6

Inst (5)   %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs

Inst (7)   %31:intregs = S2_extractu %29:intregs, 7, 5

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   %31:intregs = S2_extractu %29:intregs, 7, 5

Inst (6)   %30:intregs = S2_extractu %29:intregs, 4, 2

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 3   %30:intregs = S2_extractu %29:intregs, 4, 2

Inst (8)   %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	insert at cycle 4   %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs

Inst (1)   %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6

	es:        3 ls:        4 me: 7fffffff ms: 80000000
Trying to insert node between 4 and 3 II: 2
	insert at cycle 3   %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6

Inst (4)   %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)

Inst (0)   %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -2 II: 2
	insert at cycle -1   %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6

Inst (9)   %16:intregs = A2_add %10:intregs, %0:intregs

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %16:intregs = A2_add %10:intregs, %0:intregs
Schedule Found? 1 (II=2)
cycle -1 (2) (1) %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6

cycle -1 (0) (2) %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6

cycle -1 (0) (0) %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6

cycle -1 (2) (6) %30:intregs = S2_extractu %29:intregs, 4, 2

cycle -1 (1) (5) %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs

cycle -1 (0) (4) %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)

cycle -1 (0) (9) %16:intregs = A2_add %10:intregs, %0:intregs

cycle 0 (2) (8) %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs

cycle 0 (1) (7) %31:intregs = S2_extractu %29:intregs, 7, 5

cycle 0 (0) (3) %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)

[stage 2 @-1c] %12:intregs = PHI %25:intregs, %bb.4, %14:intregs, %bb.6
[stage 0 @-1c] %13:intregs = PHI %3:intregs, %bb.4, %17:intregs, %bb.6
[stage 0 @-1c] %10:intregs = PHI %5:intregs, %bb.4, %16:intregs, %bb.6
[stage 2 @-1c] %30:intregs = S2_extractu %29:intregs, 4, 2
[stage 1 @-1c] %29:intregs = nsw M2_mpyi %28:intregs, %27:intregs
[stage 0 @-1c] %28:intregs = L2_loadrh_io %10:intregs, 0 :: (load (s16) from %ir.lsr.iv2)
[stage 0 @-1c] %16:intregs = A2_add %10:intregs, %0:intregs
[stage 2 @0c] %14:intregs = M2_maci %12:intregs(tied-def 0), %30:intregs, %31:intregs
[stage 1 @0c] %31:intregs = S2_extractu %29:intregs, 7, 5
[stage 0 @0c] %27:intregs, %17:intregs = L2_loadrh_pi %13:intregs(tied-def 1), 2 :: (load (s16) from %ir.arrayidx9_us_us_phi)
Dynamic: TC > 2
Dynamic: TC > 1

!!! Can not pipeline loop.

!!! Can not pipeline loop.
	.text
	.file	"<stdin>"
	.globl	matrix_mul_matrix_bitextract    // -- Begin function matrix_mul_matrix_bitextract
	.p2align	4
	.type	matrix_mul_matrix_bitextract,@function
matrix_mul_matrix_bitextract:           // @matrix_mul_matrix_bitextract
	.cfi_startproc
// %bb.0:                               // %entry
	{
		r29 = add(r29,#-8)
		p0 = cmp.eq(r0,#0)
	}
	{
		memd(r29+#0) = r17:16
	}                                       // 8-byte Folded Spill
	{
		if (p0) r29 = add(r29,#8)
		if (p0) jumpr:nt r31
		if (p0) r17:16 = memd(r29+#0)
	}                                       // 8-byte Folded Reload
.LBB0_1:                                // %for_body3_lr_ph_us.preheader
	{
		r4 = asl(r0,#1)
		r5 = #0 ; jump .LBB0_2
	}
	.p2align	4
.LBB0_8:                                // %for_cond1_for_inc25_crit_edge_us
                                        //   in Loop: Header=BB0_2 Depth=1
	{
		r5 = add(r5,#1)
		if (cmp.eq(r5.new,r0)) jump:nt .LBB0_9
	}
.LBB0_2:                                // %for_body3_lr_ph_us
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_3 Depth 2
                                        //       Child Loop BB0_5 Depth 3
	{
		loop1(.LBB0_3,r0)
		r6 = mpyi(r5,r0)
		r7 = r3
		r8 = #0
	}
	{
		r9 = addasl(r2,r6,#1)
		jump .LBB0_3
	}
	.p2align	4
.LBB0_6:                                // %for_body6_us_us
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		r28 = extractu(r10,#4,#2)
	}
	{
		r12 += mpyi(r28,r16)
	}
.LBB0_7:                                // %for_body6_us_us
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		r14 = mpyi(r14,r15)
		r8 = add(r8,#1)
		r7 = add(r7,#2)
	}
	{
		r15 = extractu(r14,#7,#5)
		r14 = extractu(r14,#4,#2)
	}
	{
		r12 += mpyi(r14,r15)
		nop
		memw(r13+#0) = r12.new
	} :endloop1
	{
		jump .LBB0_8
	}
.Ltmp0:                                 // Block address taken
.LBB0_3:                                // %for_body3_us_us
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_5 Depth 3
	{
		r13 = add(r8,r6)
		r12 = #0
		r28 = r9
		r16 = add(r0,#-2)
	}
	{
		r13 = addasl(r1,r13,#2)
		p0 = cmp.gtu(r0,#1)
		r11 = add(r7,r4)
		memw(r1+r13<<#2) = r12
	}
	{
		if (!p0) jump:nt .LBB0_7
		r14 = memh(r7+#0)
		r15 = memh(r28++#2)
	}
// %bb.4:                               // %for_body6_us_us
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		loop0(.LBB0_5,r16)
		r10 = mpyi(r14,r15)
		p0 = cmp.gtu(r0,#2)
		r14 = memh(r11+#0)
	}
	{
		r16 = extractu(r10,#7,#5)
		if (!p0) jump:nt .LBB0_6
		r11 = add(r11,r4)
		r15 = memh(r28++#2)
	}
	.p2align	4
.Ltmp1:                                 // Block address taken
.LBB0_5:                                // %for_body6_us_us
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_3 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	{
		r17 = extractu(r10,#4,#2)
		r10 = mpyi(r14,r15)
		r11 = add(r11,r4)
		r14 = memh(r11+#0)
	}
	{
		r12 += mpyi(r17,r16)
		r16 = extractu(r10,#7,#5)
		r15 = memh(r28++#2)
	} :endloop0
	{
		jump .LBB0_6
	}
.LBB0_9:                                // %for_end27
	{
		r29 = add(r29,#8)
		r17:16 = memd(r29+#0)
		jumpr r31
	}                                       // 8-byte Folded Reload
.Lfunc_end0:
	.size	matrix_mul_matrix_bitextract, .Lfunc_end0-matrix_mul_matrix_bitextract
	.cfi_endproc
                                        // -- End function
	.type	sem_i,@object                   // @sem_i
	.comm	sem_i,1,4
	.section	".note.GNU-stack","",@progbits
