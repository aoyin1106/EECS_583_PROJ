SU(0):   %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=0 Reg=%1
    SU(6): Anti Latency=1
SU(1):   %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(2): Data Latency=0 Reg=%2
    SU(2): Anti Latency=1
SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=%12
SU(3):   %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
  Successors:
    SU(4): Data Latency=1 Reg=%13
    SU(5): Anti Latency=0
SU(4):   %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%13
  Successors:
    SU(5): Data Latency=1 Reg=%14
    SU(5): Anti Latency=0
SU(5):   %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%14
    SU(4): Anti Latency=0
    SU(3): Anti Latency=0
  Successors:
    SU(6): Data Latency=0 Reg=%15
SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%15
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf
ReservedCycles:0, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(1):   %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1
SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)
SU(3):   %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr
SU(4):   %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr
SU(5):   %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf
SU(0):   %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)
	Node 0:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 2
	   ZLD  = 0
	   ZLH  = 2
	Node 4:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 5:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 4
	   H    = 0
	   ZLD  = 1
	   ZLH  = 1
	Node 6:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 4
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 4 col 0
   SU(0) %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1
   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1
   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)

  NodeSet Num nodes 5 rec 1 mov 3 depth 4 col 0
   SU(0) %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)
   SU(5) %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf
   SU(4) %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr
   SU(3) %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 5
  Top down (succs) 3 4 5 6 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  2  1  3  4  5  6  0 
Try to schedule with 2

Inst (2)   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)

Inst (1)   %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1

Inst (3)   %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr

Inst (4)   %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr

Inst (5)   %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf

	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 4 II: 2
	insert at cycle 3   %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf

Inst (6)   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)

	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 4 II: 2
	insert at cycle 3   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)

Inst (0)   %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1

	es:        2 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 2 II: 2
	insert at cycle 2   %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
Schedule Found? 1 (II=2)
cycle -1 (0) (1) %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1

cycle -1 (2) (5) %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf

cycle -1 (2) (6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)

cycle -1 (1) (3) %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr

cycle 0 (1) (0) %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1

cycle 0 (1) (4) %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr

cycle 0 (0) (2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)

[stage 0 @-1c] %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, %bb.1
[stage 2 @-1c] %15:intregs = A2_sath %14:intregs, implicit-def dead $usr_ovf
[stage 2 @-1c] %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:intregs :: (store (s16) into %ir.v2, !tbaa !4)
[stage 1 @-1c] %13:intregs = F2_sfmpy %12:intregs, %8:intregs, implicit $usr
[stage 1 @0c] %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, %bb.1
[stage 1 @0c] %14:intregs = F2_conv_sf2w %13:intregs, implicit $usr
[stage 0 @0c] %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load (s32) from %ir.v3, !tbaa !0)
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
	.cfi_startproc
// %bb.0:                               // %b0
	{
		p0 = cmp.gt(r3,#0)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:
	{
		p0 = cmp.gtu(r3,#1); if (!p0.new) jump:t .LBB0_5
		r5 = add(r3,#-2)
		r4 = memw(r1++#4)
	}
// %bb.2:                               // %b1
	{
		r6 = sfmpy(r4,r2)
		p0 = cmp.gtu(r3,#2)
		r4 = memw(r1++#4)
	}
	{
		loop0(.LBB0_3,r5)
		r3 = convert_sf2w(r6)
	}
	{
		if (!p0) jump:nt .LBB0_4
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_3:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r3 = sath(r3)
		memh(r0++#2) = r3.new
	}
	{
		r3 = sfmpy(r4,r2)
		r4 = memw(r1++#4)
	}
	{
		r3 = convert_sf2w(r3)
		nop
	} :endloop0
.LBB0_4:                                // %b1
	{
		r1 = sath(r3)
		memh(r0++#2) = r1.new
	}
.LBB0_5:                                // %b1
	{
		r1 = sfmpy(r4,r2)
	}
	{
		r1 = convert_sf2w(r1)
	}
	{
		r1 = sath(r1)
		jumpr r31
		memh(r0++#2) = r1.new
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
	.cfi_endproc
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
