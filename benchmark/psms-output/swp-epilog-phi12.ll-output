SU(0):   %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(11): Data Latency=0 Reg=%0
    SU(1): Ord  Latency=0 Barrier
SU(1):   %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Ord  Latency=0 Barrier
  Successors:
    SU(5): Data Latency=0 Reg=%1
    SU(11): Anti Latency=1
SU(2):   %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=0 Reg=%2
    SU(3): Ord  Latency=0 Barrier
SU(3):   %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(2): Ord  Latency=0 Barrier
  Successors:
    SU(8): Data Latency=0 Reg=%3
    SU(10): Anti Latency=1
SU(4):   %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(9): Data Latency=0 Reg=%5
    SU(9): Anti Latency=1
SU(5):   %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Successors:
    SU(6): Data Latency=2 Reg=%17
SU(6):   %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=2 Reg=%17
  Successors:
    SU(7): Data Latency=1 Reg=%18
SU(7):   %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(6): Data Latency=1 Reg=%18
  Successors:
    SU(8): Data Latency=0 Reg=%19
SU(8):   S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(7): Data Latency=0 Reg=%19
    SU(3): Data Latency=0 Reg=%3
SU(9):   %7:intregs = A2_addi %5:intregs, -2
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%5
    SU(4): Anti Latency=1
SU(10):   %8:intregs = nuw A2_addi %2:intregs, 8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%2
    SU(3): Anti Latency=1
SU(11):   %9:intregs = nuw A2_addi %0:intregs, 4
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %8:intregs = nuw A2_addi %2:intregs, 8
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %9:intregs = nuw A2_addi %0:intregs, 4
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs = A2_addi %5:intregs, -2
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(0):   %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1
SU(1):   %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1
SU(5):   %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)
SU(6):   %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs
SU(7):   %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf
SU(2):   %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1
SU(3):   %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1
SU(8):   S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)
SU(4):   %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1
SU(9):   %7:intregs = A2_addi %5:intregs, -2
SU(10):   %8:intregs = nuw A2_addi %2:intregs, 8
SU(11):   %9:intregs = nuw A2_addi %0:intregs, 4
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 3:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 1
	   ZLH  = 1
	Node 4:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 5:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 2
	   ZLH  = 0
	Node 6:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 7:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 8:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
	Node 9:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 10:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 11:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(4) %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1
   SU(9) %7:intregs = A2_addi %5:intregs, -2

  NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(4) %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1
   SU(9) %7:intregs = A2_addi %5:intregs, -2

  NodeSet Num nodes 10 rec 0 mov 0 depth 0 col 0
   SU(0) %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1
   SU(11) %9:intregs = nuw A2_addi %0:intregs, 4
   SU(1) %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1
   SU(5) %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)
   SU(6) %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs
   SU(7) %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf
   SU(8) S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)
   SU(3) %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1
   SU(10) %8:intregs = nuw A2_addi %2:intregs, 8
   SU(2) %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1

NodeSet size 2
  Bottom up (default) 9 4 
   Switching order to top down 
Done with Nodeset
NodeSet size 10
  Bottom up (default) 8 7 6 5 1 11 3 10 0 2 
   Switching order to top down 
Done with Nodeset
Node order:  9  4  8  7  6  5  1  11  3  10  0  2 
Try to schedule with 2

Inst (9)   %7:intregs = A2_addi %5:intregs, -2

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %7:intregs = A2_addi %5:intregs, -2

Inst (4)   %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1

Inst (8)   S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 3   S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)

Inst (7)   %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf

	es: 80000000 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 2 II: 2
	insert at cycle 3   %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf

Inst (6)   %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs

	es: 80000000 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 1 II: 2
	insert at cycle 2   %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs

Inst (5)   %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)

Inst (1)   %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1

Inst (11)   %9:intregs = nuw A2_addi %0:intregs, 4

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %9:intregs = nuw A2_addi %0:intregs, 4

Inst (3)   %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1

	es: 80000000 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 2 II: 2
	insert at cycle 3   %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1

Inst (10)   %8:intregs = nuw A2_addi %2:intregs, 8

	es: 80000000 ls:        4 me: 7fffffff ms: 80000000
Trying to insert node between 4 and 3 II: 2
	insert at cycle 4   %8:intregs = nuw A2_addi %2:intregs, 8

Inst (0)   %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -2 II: 2
	insert at cycle -1   %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1

Inst (2)   %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1

	es: 80000000 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 2 II: 2
	insert at cycle 3   %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1
Schedule Found? 1 (II=2)
cycle -1 (2) (3) %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1

cycle -1 (2) (2) %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1

cycle -1 (0) (4) %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1

cycle -1 (0) (1) %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1

cycle -1 (0) (0) %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1

cycle -1 (2) (7) %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf

cycle -1 (2) (8) S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)

cycle -1 (0) (11) %9:intregs = nuw A2_addi %0:intregs, 4

cycle 0 (2) (10) %8:intregs = nuw A2_addi %2:intregs, 8

cycle 0 (1) (6) %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs

cycle 0 (0) (9) %7:intregs = A2_addi %5:intregs, -2

cycle 0 (0) (5) %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)

[stage 2 @-1c] %3:intregs = PHI %23:intregs, %bb.3, %8:intregs, %bb.1
[stage 2 @-1c] %2:intregs = PHI %23:intregs, %bb.3, %3:intregs, %bb.1
[stage 0 @-1c] %5:intregs = PHI %13:intregs, %bb.3, %7:intregs, %bb.1
[stage 0 @-1c] %1:intregs = PHI %13:intregs, %bb.3, %9:intregs, %bb.1
[stage 0 @-1c] %0:intregs = PHI %11:intregs, %bb.3, %1:intregs, %bb.1
[stage 2 @-1c] %19:intregs = M2_mpy_acc_sat_ll_s0 %18:intregs(tied-def 0), %20:intregs, %21:intregs, implicit-def dead $usr_ovf
[stage 2 @-1c] S2_storeri_io %3:intregs, 0, %19:intregs :: (store (s32) into %ir.v4)
[stage 0 @-1c] %9:intregs = nuw A2_addi %0:intregs, 4
[stage 2 @0c] %8:intregs = nuw A2_addi %2:intregs, 8
[stage 1 @0c] %18:intregs = M2_mpy_ll_s0 %17:intregs, %17:intregs
[stage 0 @0c] %7:intregs = A2_addi %5:intregs, -2
[stage 0 @0c] %17:intregs = L2_loadrh_io %1:intregs, 0 :: (load (s16) from %ir.v2)
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		if (p0) jumpr:nt r31
		r0 = #0
		r2 = r0
	}
.LBB0_1:
	{
		r3 = add(r2,#4)
		r6 = add(r1,#-2)
		p0 = cmp.gtu(r1,#1)
		r2 = memh(r0+#0)
	}
	{
		if (!p0) jump:nt .LBB0_2
	}
// %bb.3:                               // %b2
	{
		loop0(.LBB0_4,r6)
		r1 = mpy(r2.l,r2.l)
		p0 = cmp.gtu(r1,#2)
		r5 = add(r0,#4)
	}
	{
		if (!p0) jump:nt .LBB0_5
		r7:6 = combine(#0,#0)
		r2 = memh(r3+#0)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_4:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r1 += mpy(r0.l,r0.l):sat
		r8 = r5
		r7 = r0
		r5 = add(r3,#4)
	}
	{
		r1 = mpy(r2.l,r2.l)
		r0 = add(r6,#8)
		r3 = r8
		memw(r7+#0) = r1
	}
	{
		r6 = r7
		r2 = memh(r8+#0)
	} :endloop0
.LBB0_5:                                // %b2
	{
		r3 = r0
		r0 = add(r7,#8)
	}
	{
		r1 += mpy(r0.l,r0.l):sat
		jump .LBB0_6
		memw(r3+#0) = r1.new
	}
.LBB0_2:
	{
		r3 = #0
	}
.LBB0_6:                                // %b2
	{
		r1 = mpy(r2.l,r2.l)
	}
	{
		r1 += mpy(r0.l,r0.l):sat
		jumpr r31
		r0 = add(r3,#8)
		memw(r0+#0) = r1.new
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
