SU(0):   %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(11): Data Latency=0 Reg=%1
    SU(7): Data Latency=0 Reg=%1
    SU(4): Data Latency=0 Reg=%1
    SU(2): Data Latency=0 Reg=%1
    SU(11): Anti Latency=1
SU(1):   %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(10): Data Latency=0 Reg=%2
    SU(10): Anti Latency=1
SU(2):   %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(3): Data Latency=1 Reg=%10
SU(3):   %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%10
  Successors:
    SU(6): Data Latency=1 Reg=%12
SU(4):   %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=1 Reg=%13
SU(5):   %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(4): Data Latency=1 Reg=%13
  Successors:
    SU(6): Data Latency=1 Reg=%15
SU(6):   %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(5): Data Latency=1 Reg=%15
    SU(3): Data Latency=1 Reg=%12
  Successors:
    SU(9): Data Latency=1 Reg=%16
SU(7):   %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(8): Data Latency=1 Reg=%17
SU(8):   %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(7): Data Latency=1 Reg=%17
  Successors:
    SU(9): Data Latency=1 Reg=%19
SU(9):   %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(8): Data Latency=1 Reg=%19
    SU(6): Data Latency=1 Reg=%16
  Successors:
    SU(10): Data Latency=0 Reg=%20
SU(10):   %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(9): Data Latency=0 Reg=%20
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
SU(11):   %6:intregs = A2_addi %1:intregs, 12
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %6:intregs = A2_addi %1:intregs, 12
ReservedCycles:1, NumCycles:1
Return Res MII:3
MII = 3 MAX_II = 13 (rec=1, res=3)
SU(0):   %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1
SU(7):   %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)
SU(8):   %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr
SU(4):   %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)
SU(5):   %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr
SU(2):   %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)
SU(3):   %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr
SU(6):   %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr
SU(9):   %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr
SU(1):   %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1
SU(10):   %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)
SU(11):   %6:intregs = A2_addi %1:intregs, 12
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 6:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 7:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 2
	   ZLD  = 1
	   ZLH  = 0
	Node 8:
	   ASAP = 1
	   ALAP = 2
	   MOV  = 1
	   D    = 1
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 9:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 10:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 11:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(0) %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1
   SU(11) %6:intregs = A2_addi %1:intregs, 12

  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(1) %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1
   SU(10) %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)

  NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(1) %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1
   SU(10) %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)

  NodeSet Num nodes 10 rec 1 mov 3 depth 1 col 0
   SU(0) %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1
   SU(11) %6:intregs = A2_addi %1:intregs, 12
   SU(9) %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr
   SU(8) %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr
   SU(7) %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)
   SU(6) %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr
   SU(5) %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr
   SU(4) %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)
   SU(3) %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr
   SU(2) %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)

NodeSet size 2
  Bottom up (default) 10 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 10
  Bottom up (preds) 9 6 5 3 8 4 2 7 0 11 
   Switching order to top down 
Done with Nodeset
Node order:  10  1  9  6  5  3  8  4  2  7  0  11 
Try to schedule with 3

Inst (10)   %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 5 II: 3
	insert at cycle 3   %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)

Inst (1)   %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1

	es:        1 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 1 II: 3
	insert at cycle 2   %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1

Inst (9)   %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr

	es: 80000000 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 1 II: 3
	insert at cycle 2   %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr

Inst (6)   %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 1   %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr

Inst (5)   %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle 0   %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr

Inst (3)   %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr

Inst (8)   %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 1   %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr

Inst (4)   %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -1   %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)

Inst (2)   %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)

	es: 80000000 ls: fffffffe me: 7fffffff ms: 80000000
Trying to insert node between -2 and -4 II: 3
	insert at cycle -2   %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)

Inst (7)   %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle 0   %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)

Inst (0)   %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1

	es: 80000000 ls: fffffffe me: 7fffffff ms: 80000000
Trying to insert node between -2 and -4 II: 3
	insert at cycle -2   %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1

Inst (11)   %6:intregs = A2_addi %1:intregs, 12

	es: fffffffe ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between -2 and 0 II: 3
	insert at cycle -2   %6:intregs = A2_addi %1:intregs, 12
Schedule Found? 1 (II=3)
cycle -2 (0) (0) %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1

cycle -2 (1) (6) %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr

cycle -2 (1) (8) %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr

cycle -2 (0) (2) %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)

cycle -2 (0) (11) %6:intregs = A2_addi %1:intregs, 12

cycle -1 (1) (1) %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1

cycle -1 (1) (9) %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr

cycle -1 (0) (3) %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr

cycle -1 (0) (4) %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)

cycle 0 (1) (10) %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)

cycle 0 (0) (5) %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr

cycle 0 (0) (7) %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)

[stage 0 @-2c] %1:intregs = PHI %0:intregs, %bb.0, %6:intregs, %bb.1
[stage 1 @-2c] %16:intregs = F2_sfadd %15:intregs, %12:intregs, implicit $usr
[stage 1 @-2c] %19:intregs = F2_sfmpy %17:intregs, %18:intregs, implicit $usr
[stage 0 @-2c] %10:intregs = L2_loadri_io %1:intregs, -4 :: (load (s32) from %ir.cgep10)
[stage 0 @-2c] %6:intregs = A2_addi %1:intregs, 12
[stage 1 @-1c] %2:intregs = PHI %7:intregs, %bb.0, %5:intregs, %bb.1
[stage 1 @-1c] %20:intregs = F2_sfadd %16:intregs, %19:intregs, implicit $usr
[stage 0 @-1c] %12:intregs = F2_sfmpy %10:intregs, %11:intregs, implicit $usr
[stage 0 @-1c] %13:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv57)
[stage 1 @0c] %5:intregs = S2_storeri_pi %2:intregs(tied-def 0), 4, %20:intregs :: (store (s32) into %ir.lsr.iv12)
[stage 0 @0c] %15:intregs = F2_sfmpy %13:intregs, %14:intregs, implicit $usr
[stage 0 @0c] %17:intregs = L2_loadri_io %1:intregs, 4 :: (load (s32) from %ir.cgep11)
Static-true: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
	.cfi_startproc
// %bb.0:                               // %b0
	{
		allocframe(r29,#72):raw
	}
	.cfi_def_cfa r30, 8
	.cfi_offset r31, -4
	.cfi_offset r30, -8
	{
		r2 = ##-1086483063
		memw(r29+#36) = ##1065352075
	}
	{
		r3 = ##1054105166
		r4 = add(r29,#36)
	}
	{
		memw(r29+#40) = ##-1136905224
		memw(r29+#44) = ##-1156829577
	}
	{
		r0 = add(r29,#24)
		r6 = add(r4,#4)
		memw(r29+#48) = ##1010566613
	}
	{
		r1 = ##1075342136
		memw(r29+#52) = ##1065351907
	}
	{
		memw(r29+#56) = ##-1146909813
		memw(r29+#60) = ##990903179
	}
	{
		r4 = add(r6,#12)
		memw(r29+#64) = ##1000520148
	}
	{
		memw(r29+#68) = ##1065352964
	}
	{
		r5 = memw(r6+#-4)
		r8 = memw(r6+#0)
	}
	{
		r5 = sfmpy(r5,r2)
		r6 = sfmpy(r8,r3)
		r7 = memw(r6+#4)
	}
	{
		loop0(.LBB0_1,#2)
	}
	.p2align	4
.Ltmp1:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r9 = sfadd(r6,r5)
		r8 = sfmpy(r7,r1)
		r6 = memw(r4+#0)
		r5 = memw(r4+#-4)
	}
	{
		r4 = sfadd(r9,r8)
		r12 = add(r4,#12)
		r7 = memw(r4+#4)
		memw(r0++#4) = r4.new
	}
	{
		r5 = sfmpy(r5,r2)
		r6 = sfmpy(r6,r3)
		r4 = r12
	} :endloop0
// %bb.2:                               // %b1
	{
		r2 = sfadd(r6,r5)
		r1 = sfmpy(r7,r1)
	}
	{
		r1 = sfadd(r2,r1)
		memw(r0++#4) = r1.new
	}
	{
		r0 = ##g0
		r1 = memw(r29+#24)
		r3 = memw(r29+#32)
	}
	{
		r5:4 = convert_sf2df(r1)
		r2 = memw(r29+#28)
	}
	{
		r7:6 = convert_sf2df(r2)
		r3:2 = convert_sf2df(r3)
		memd(r29+#0) = r5:4
	}
	{
		call f1
		memd(r29+#16) = r3:2
		memd(r29+#8) = r7:6
	}
	{
		r0 = #0
		dealloc_return
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
	.cfi_endproc
                                        // -- End function
	.hidden	g0
	.section	".note.GNU-stack","",@progbits
