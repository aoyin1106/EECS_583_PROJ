SU(0):   %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=0 Reg=%2
    SU(8): Anti Latency=1
SU(1):   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(3): Data Latency=0 Reg=%3
    SU(3): Anti Latency=1
SU(2):   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 9
  Successors:
    SU(4): Data Latency=0 Reg=%4
    SU(4): Anti Latency=1
SU(3):   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
  Successors:
    SU(7): Data Latency=2 Reg=%24
SU(4):   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 8
  Predecessors:
    SU(2): Data Latency=0 Reg=%4
    SU(2): Anti Latency=1
  Successors:
    SU(5): Data Latency=2 Reg=%25
SU(5):   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 6
  Predecessors:
    SU(4): Data Latency=2 Reg=%25
  Successors:
    SU(6): Data Latency=2 Reg=%26
SU(6):   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 4
  Predecessors:
    SU(5): Data Latency=2 Reg=%26
  Successors:
    SU(7): Data Latency=2 Reg=%27
SU(7):   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 7
  Height             : 2
  Predecessors:
    SU(6): Data Latency=2 Reg=%27
    SU(3): Data Latency=2 Reg=%24
  Successors:
    SU(8): Data Latency=2 Reg=%28
SU(8):   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 9
  Height             : 0
  Predecessors:
    SU(7): Data Latency=2 Reg=%28
    SU(0): Data Latency=0 Reg=%2
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(2):   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1
SU(4):   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)
SU(5):   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000
SU(6):   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)
SU(1):   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1
SU(3):   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)
SU(7):   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
SU(0):   %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
SU(8):   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
	Node 0:
	   ASAP = 0
	   ALAP = 8
	   MOV  = 8
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 9
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 1
	   H    = 4
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 8
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 6
	   ZLD  = 0
	   ZLH  = 0
	Node 6:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 4
	   ZLD  = 0
	   ZLH  = 0
	Node 7:
	   ASAP = 6
	   ALAP = 6
	   MOV  = 0
	   D    = 7
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 8:
	   ASAP = 8
	   ALAP = 8
	   MOV  = 0
	   D    = 9
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 8 depth 9 col 0
   SU(0) %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
   SU(8) %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr

  Rec NodeSet Num nodes 2 rec 1 mov 4 depth 1 col 0
   SU(1) %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1
   SU(3) %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(2) %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1
   SU(4) %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(2) %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1
   SU(4) %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

  NodeSet Num nodes 2 rec 1 mov 4 depth 1 col 0
   SU(1) %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1
   SU(3) %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

  NodeSet Num nodes 5 rec 1 mov 8 depth 9 col 0
   SU(0) %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
   SU(8) %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
   SU(7) %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
   SU(6) %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)
   SU(5) %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

NodeSet size 2
  Bottom up (default) 4 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 3 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 5
  Top down (succs) 5 6 7 8 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  4  2  3  1  5  6  7  8  0 
Try to schedule with 2

Inst (4)   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

Inst (2)   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

Inst (3)   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

Inst (1)   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

	es: fffffffe ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -2 II: 2
	insert at cycle -1   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

Inst (5)   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

Inst (6)   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	insert at cycle 5   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

Inst (7)   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

	es:        7 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 7 and 8 II: 2
	insert at cycle 7   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
	Can't schedule
Try to schedule with 3

Inst (4)   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 2 II: 3
	insert at cycle 0   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

Inst (2)   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

	es: fffffffe ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

Inst (3)   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 1 II: 3
	insert at cycle -1   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

Inst (1)   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

	es: fffffffd ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -2   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

Inst (5)   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 4 II: 3
	insert at cycle 4   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

Inst (6)   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

	es:        6 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 6 and 8 II: 3
	insert at cycle 6   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

Inst (7)   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

	es:        8 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 8 and 10 II: 3
	insert at cycle 8   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

Inst (8)   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr

	es:        a ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 10 and 12 II: 3
	insert at cycle 10   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
	Can't schedule
Try to schedule with 4

Inst (4)   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	insert at cycle 0   %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

Inst (2)   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

	es: fffffffd ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -3 II: 4
	insert at cycle -1   %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

Inst (3)   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 2 II: 4
	insert at cycle -1   %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

Inst (1)   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

	es: fffffffc ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -4 II: 4
	insert at cycle -2   %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

Inst (5)   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 5 II: 4
	insert at cycle 2   %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

Inst (6)   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 7 II: 4
	insert at cycle 5   %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

Inst (7)   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

	es:        7 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 7 and 10 II: 4
	insert at cycle 7   %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

Inst (8)   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr

	es:        9 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 9 and 12 II: 4
	insert at cycle 9   %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr

Inst (0)   %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1

	es:        6 ls:        9 me: 7fffffff ms: 80000000
Trying to insert node between 9 and 6 II: 4
	insert at cycle 8   %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
Schedule Found? 1 (II=4)
cycle -2 (0) (1) %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1

cycle -2 (1) (5) %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000

cycle -1 (0) (2) %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1

cycle -1 (2) (7) %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr

cycle -1 (0) (3) %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)

cycle 0 (2) (0) %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1

cycle 0 (0) (4) %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)

cycle 1 (2) (8) %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr

cycle 1 (1) (6) %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)

[stage 0 @-2c] %3:intregs = PHI %14:intregs, %bb.4, %8:intregs, %bb.1
[stage 1 @-2c] %26:intregs = M2_macsip %15:intregs(tied-def 0), %25:intregs, 4000
[stage 0 @-1c] %4:intregs = PHI %16:intregs, %bb.4, %9:intregs, %bb.1
[stage 2 @-1c] %28:intregs = F2_sfmpy %24:intregs, %27:intregs, implicit $usr
[stage 0 @-1c] %24:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load (s32) from %ir.v5)
[stage 2 @0c] %2:intregs = PHI %18:intregs, %bb.4, %6:intregs, %bb.1
[stage 0 @0c] %25:intregs, %9:intregs = L2_loadri_pi %4:intregs(tied-def 1), 4 :: (load (s32) from %ir.v6)
[stage 2 @1c] %6:intregs = F2_sfadd %2:intregs, %28:intregs, implicit $usr
[stage 1 @1c] %27:intregs = L4_loadri_rr %26:intregs, %17:intregs, 2 :: (load (s32) from %ir.cgep)
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r17:16 = combine(r5,r1)
		memd(r29+#-16) = r17:16
		allocframe(#32)
	}                                       // 8-byte Folded Spill
	{
		r19:18 = combine(r4,r3)
		r20 = r2
		memd(r29+#16) = r19:18
		memd(r29+#8) = r21:20
	}                                       // 8-byte Folded Spill
	{
		call f1
	}
	{
		r5:4 = convert_w2df(r0)
		p0 = cmp.gt(r16,#1); if (!p0.new) jump:t .LBB0_1
	}
// %bb.2:
	{
		r2 = add(r16,#-1)
		r0 = #0
		r1 = memw(r20++#4)
		r3 = memw(r19++#4)
	}
	{
		p0 = cmp.gtu(r2,#1); if (!p0.new) jump:t .LBB0_6
		r6 = add(r2,#-2)
	}
// %bb.3:                               // %b1
	{
		loop0(.LBB0_4,r6)
		r7 = r18
		p0 = cmp.gtu(r2,#2)
		r2 = memw(r20++#4)
	}
	{
		r7 += mpyi(r3,##4000)
		r6 = r1
		r3 = memw(r19++#4)
	}
	{
		if (!p0) jump:nt .LBB0_5
		r7 = memw(r7+r17<<#2)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_4:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r7 = sfmpy(r1,r7)
		r8 = r18
		r6 = r2
		r2 = memw(r20++#4)
	}
	{
		r8 += mpyi(r3,##4000)
		r1 = r6
		r3 = memw(r19++#4)
	}
	{
		r0 = sfadd(r0,r7)
	}
	{
		nop
		r7 = memw(r8+r17<<#2)
	} :endloop0
.LBB0_5:                                // %b1
	{
		r6 = sfmpy(r6,r7)
		r1 = r2
	}
	{
		r0 = sfadd(r0,r6)
	}
.LBB0_6:                                // %b1
	{
		r18 += mpyi(r3,##4000)
	}
	{
		r2 = memw(r18+r17<<#2)
	}
	{
		r1 = sfmpy(r1,r2)
	}
	{
		r0 = sfadd(r0,r1)
	}
	{
		r1:0 = convert_sf2df(r0)
		jump .LBB0_7
	}
.LBB0_1:
	{
		r1:0 = combine(#0,#0)
	}
.LBB0_7:                                // %b3
	{
		call f2
		r3:2 = combine(r16,r16)
		memw(r29+#0) = ##.Lg0
	}
	{
		r17:16 = memd(r29+#24)
		r19:18 = memd(r29+#16)
	}                                       // 8-byte Folded Reload
	{
		r21:20 = memd(r29+#8)
		dealloc_return
	}                                       // 8-byte Folded Reload
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.type	.Lg0,@object                    // @g0
	.section	.rodata.str1.1,"aMS",@progbits,1
.Lg0:
	.string	"s4116"
	.size	.Lg0, 6

	.section	".note.GNU-stack","",@progbits
