SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti |	SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti
SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2 |	SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2
  %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def  |	  %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(tied-def 
  %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:i |	  %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2, %15:i
SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti |	SU(2):   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti
SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2 |	SU(6):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2
   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2 |	   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2
   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti |	   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti
   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti |	   SU(2) %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(ti
   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2 |	   SU(6) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), 2
Inst (2)   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs( |	Inst (2)   %12:intregs, %4:intregs = L2_loadri_pi %2:intregs(
	insert at cycle 0   %12:intregs, %4:intregs = L2_load |		insert at cycle 0   %12:intregs, %4:intregs = L2_load
	insert at cycle 0   %2:intregs = PHI %7:intregs, %bb. |		insert at cycle -1   %2:intregs = PHI %7:intregs, %bb
Inst (6)   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), |	Inst (6)   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0),
	insert at cycle 3   %5:intregs = S2_storerh_pi %1:int |		insert at cycle 3   %5:intregs = S2_storerh_pi %1:int
	insert at cycle 3   %1:intregs = PHI %6:intregs, %bb. |		insert at cycle 2   %1:intregs = PHI %6:intregs, %bb.
Schedule Found? 1 (II=3)				      |	Schedule Found? 1 (II=2)
cycle 0 (0) (1) %2:intregs = PHI %7:intregs, %bb.3, %4:intreg |	cycle -1 (0) (1) %2:intregs = PHI %7:intregs, %bb.3, %4:intre
cycle 0 (1) (4) %14:intregs = F2_conv_sf2w %13:intregs, impli |	cycle -1 (2) (5) %15:intregs = A2_sath %14:intregs, implicit-
cycle 0 (0) (2) %12:intregs, %4:intregs = L2_loadri_pi %2:int |	cycle -1 (2) (6) %5:intregs = S2_storerh_pi %1:intregs(tied-d
cycle 1 (1) (0) %1:intregs = PHI %6:intregs, %bb.3, %5:intreg |	cycle -1 (1) (3) %13:intregs = F2_sfmpy %12:intregs, %8:intre
cycle 1 (1) (5) %15:intregs = A2_sath %14:intregs, implicit-d |	cycle 0 (1) (0) %1:intregs = PHI %6:intregs, %bb.3, %5:intreg
cycle 1 (1) (6) %5:intregs = S2_storerh_pi %1:intregs(tied-de |	cycle 0 (1) (4) %14:intregs = F2_conv_sf2w %13:intregs, impli
cycle 1 (0) (3) %13:intregs = F2_sfmpy %12:intregs, %8:intreg |	cycle 0 (0) (2) %12:intregs, %4:intregs = L2_loadri_pi %2:int
[stage 0 @0c] %2:intregs = PHI %7:intregs, %bb.3, %4:intregs, |	[stage 0 @-1c] %2:intregs = PHI %7:intregs, %bb.3, %4:intregs
							      >	[stage 2 @-1c] %15:intregs = A2_sath %14:intregs, implicit-de
							      >	[stage 2 @-1c] %5:intregs = S2_storerh_pi %1:intregs(tied-def
							      >	[stage 1 @-1c] %13:intregs = F2_sfmpy %12:intregs, %8:intregs
							      >	[stage 1 @0c] %1:intregs = PHI %6:intregs, %bb.3, %5:intregs,
[stage 0 @0c] %12:intregs, %4:intregs = L2_loadri_pi %2:intre |	[stage 0 @0c] %12:intregs, %4:intregs = L2_loadri_pi %2:intre
[stage 1 @1c] %1:intregs = PHI %6:intregs, %bb.3, %5:intregs, |	Dynamic: TC > 2
[stage 1 @1c] %15:intregs = A2_sath %14:intregs, implicit-def <
[stage 1 @1c] %5:intregs = S2_storerh_pi %1:intregs(tied-def  <
[stage 0 @1c] %13:intregs = F2_sfmpy %12:intregs, %8:intregs, <
		r4 = add(r3,#-1)			      |			p0 = cmp.gtu(r3,#1); if (!p0.new) jump:t .LBB
		p0 = cmp.gtu(r3,#1)			      |			r5 = add(r3,#-2)
		r5 = memw(r1++#4)			      |			r4 = memw(r1++#4)
							      >		}
							      >	// %bb.2:                               // %b1
							      >		{
							      >			r6 = sfmpy(r4,r2)
							      >			p0 = cmp.gtu(r3,#2)
							      >			r4 = memw(r1++#4)
		loop0(.LBB0_2,r4)			      |			loop0(.LBB0_3,r5)
		r3 = sfmpy(r5,r2)			      |			r3 = convert_sf2w(r6)
		if (!p0) jump:nt .LBB0_3		      |			if (!p0) jump:nt .LBB0_4
.LBB0_2:                                // %b1		      |	.LBB0_3:                                // %b1
		r3 = convert_sf2w(r3)			      <
		r4 = memw(r1++#4)			      <
	}						      <
	{						      <
							      >			r4 = memw(r1++#4)
							      >		}
							      >		{
							      >			r3 = convert_sf2w(r3)
.LBB0_3:                                // %b1		      |	.LBB0_4:                                // %b1
							      >		{
							      >			r1 = sath(r3)
							      >			memh(r0++#2) = r1.new
							      >		}
							      >	.LBB0_5:                                // %b1
							      >		{
							      >			r1 = sfmpy(r4,r2)
							      >		}
		r1 = convert_sf2w(r3)			      |			r1 = convert_sf2w(r1)
