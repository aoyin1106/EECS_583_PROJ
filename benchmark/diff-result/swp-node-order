SU(0):   %2:doubleregs = PHI %8:doubleregs, %bb.0, %4:doubler |	Unable to analyzeLoop, can NOT pipeline Loop
  # preds left       : 0				      <
  # succs left       : 2				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 1				      <
  Successors:						      <
    SU(2): Data Latency=0 Reg=%2			      <
    SU(2): Anti Latency=1				      <
SU(1):   %3:doubleregs = PHI %9:doubleregs, %bb.0, %25:double <
  # preds left       : 0				      <
  # succs left       : 2				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 1				      <
  Successors:						      <
    SU(2): Data Latency=0 Reg=%3			      <
    SU(3): Anti Latency=1				      <
SU(2):   %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def  <
  # preds left       : 3				      <
  # succs left       : 0				      <
  # rdefs left       : 0				      <
  Latency            : 1				      <
  Depth              : 1				      <
  Height             : 0				      <
  Predecessors:						      <
    SU(1): Data Latency=0 Reg=%3			      <
    SU(0): Data Latency=0 Reg=%2			      <
    SU(0): Anti Latency=1				      <
SU(3):   %25:doubleregs = REG_SEQUENCE %16:intregs, %subreg.i <
  # preds left       : 1				      <
  # succs left       : 0				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 1				      <
  Height             : 0				      <
  Predecessors:						      <
    SU(1): Anti Latency=1				      <
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0 <
  # preds left       : 0				      <
  # succs left       : 0				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 0				      <
calculateResMII:					      <
Trying to reserve resource for 1 cycles for 		      <
  %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %3: <
ReservedCycles:1, NumCycles:1				      <
Return Res MII:1					      <
MII = 1 MAX_II = 11 (rec=1, res=1)			      <
SU(1):   %3:doubleregs = PHI %9:doubleregs, %bb.0, %25:double <
SU(0):   %2:doubleregs = PHI %8:doubleregs, %bb.0, %4:doubler <
SU(2):   %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def  <
SU(3):   %25:doubleregs = REG_SEQUENCE %16:intregs, %subreg.i <
	Node 0:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 0					      <
	   H    = 1					      <
	   ZLD  = 0					      <
	   ZLH  = 1					      <
	Node 1:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 0					      <
	   H    = 1					      <
	   ZLD  = 0					      <
	   ZLH  = 1					      <
	Node 2:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 1					      <
	   H    = 0					      <
	   ZLD  = 1					      <
	   ZLH  = 0					      <
	Node 3:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 1					      <
	   H    = 0					      <
	   ZLD  = 0					      <
	   ZLH  = 0					      <
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0	      <
   SU(0) %2:doubleregs = PHI %8:doubleregs, %bb.0, %4:doubler <
   SU(2) %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def  <
  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0		      |	!!! Can not pipeline loop.
   SU(0) %2:doubleregs = PHI %8:doubleregs, %bb.0, %4:doubler <
   SU(2) %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def  <
							      <
  NodeSet Num nodes 2 rec 0 mov 0 depth 0 col 0		      <
   SU(1) %3:doubleregs = PHI %9:doubleregs, %bb.0, %25:double <
   SU(3) %25:doubleregs = REG_SEQUENCE %16:intregs, %subreg.i <
							      <
NodeSet size 2						      <
  Bottom up (default) 2 0 				      <
   Switching order to top down 				      <
Done with Nodeset					      <
NodeSet size 2						      <
  Bottom up (preds) 1 3 				      <
   Switching order to top down 				      <
Done with Nodeset					      <
Node order:  2  0  1  3 				      <
Try to schedule with 1					      <
							      <
Inst (2)   %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-de <
							      <
	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %4:doubleregs = M2_vdmacs_s0 %2:d <
							      <
Inst (0)   %2:doubleregs = PHI %8:doubleregs, %bb.0, %4:doubl <
							      <
	es:        0 ls:        0 me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %2:doubleregs = PHI %8:doubleregs <
							      <
Inst (1)   %3:doubleregs = PHI %9:doubleregs, %bb.0, %25:doub <
							      <
	es: 80000000 ls:        0 me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %3:doubleregs = PHI %9:doubleregs <
							      <
Inst (3)   %25:doubleregs = REG_SEQUENCE %16:intregs, %subreg <
							      <
	es: 80000000 ls:        0 me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %25:doubleregs = REG_SEQUENCE %16 <
Schedule Found? 1 (II=2)				      <
cycle 0 (0) (0) %2:doubleregs = PHI %8:doubleregs, %bb.0, %4: <
							      <
cycle 0 (0) (1) %3:doubleregs = PHI %9:doubleregs, %bb.0, %25 <
							      <
cycle 0 (0) (2) %4:doubleregs = M2_vdmacs_s0 %2:doubleregs(ti <
							      <
cycle 0 (0) (3) %25:doubleregs = REG_SEQUENCE %16:intregs, %s <
							      <
No schedule found, return				      <
		r2 = asr(r0,#1)				      |			r3:2 = combine(#0,#0)
		r1:0 = combine(#0,#0)			      <
                                        // implicit-def: $d2  <
		loop0(.LBB0_1,r2)			      |			r5:4 = shuffeh(r3:2,r1:0)
		r3:2 = shuffeh(r1:0,r1:0)		      <
.Ltmp0:                                 // Block address take <
		r1:0 += vdmpy(r5:4,r1:0):sat		      |			r3:2 += vdmpy(r7:6,r1:0):sat
		r5 = r2					      |			r7 = r4 ; jump .LBB0_1
	} :endloop0					      <
// %bb.2:                               // %b2		      <
	{						      <
		r27:26 = memd(##3134984174)		      <
