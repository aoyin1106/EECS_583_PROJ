SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4  |	SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load (s
SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 |	SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store (
  %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %i |	  %8:intregs = L2_loadri_io %4:intregs, -8 :: (load (s32) fro
  S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into % |	  S2_storeri_io %4:intregs, 0, %16:intregs :: (store (s32) in
SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4  |	SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load (s
SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 |	SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store (
   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4  |	   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load (s
   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 |	   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store (
   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4  |	   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load (s
   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 |	   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store (
Inst (5)   S2_storeri_io %4:intregs, 0, %16:intregs :: (store |	Inst (5)   S2_storeri_io %4:intregs, 0, %16:intregs :: (store
	insert at cycle 1   S2_storeri_io %4:intregs, 0, %16: |		insert at cycle 1   S2_storeri_io %4:intregs, 0, %16:
	insert at cycle 1   %16:intregs = nsw A2_sub %7:intre |		insert at cycle 0   %16:intregs = nsw A2_sub %7:intre
Inst (3)   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load  |	Inst (3)   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 
	es: 80000000 ls:        0 me: 7fffffff ms:        0   |		es: 80000000 ls: ffffffff me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 2		      |		Can't schedule
	insert at cycle 0   %8:intregs = L2_loadri_io %4:intr |	Try to schedule with 3
							      >
							      >	Inst (5)   S2_storeri_io %4:intregs, 0, %16:intregs :: (store
							      >
							      >		es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
							      >	Trying to insert node between 1 and 3 II: 3
							      >		insert at cycle 1   S2_storeri_io %4:intregs, 0, %16:
							      >
							      >	Inst (4)   %16:intregs = nsw A2_sub %7:intregs, %8:intregs
							      >
							      >		es: 80000000 ls:        1 me: 7fffffff ms: 80000000
							      >	Trying to insert node between 1 and -1 II: 3
							      >		insert at cycle 0   %16:intregs = nsw A2_sub %7:intre
							      >
							      >	Inst (3)   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 
							      >
							      >		es: 80000000 ls: ffffffff me: 7fffffff ms: ffffffff
							      >	Trying to insert node between -1 and -1 II: 3
							      >		insert at cycle -1   %8:intregs = L2_loadri_io %4:int
Trying to insert node between 0 and 1 II: 2		      |	Trying to insert node between -1 and 1 II: 3
	insert at cycle 0   %10:intregs = A2_addi %4:intregs, |		insert at cycle -1   %10:intregs = A2_addi %4:intregs
	es: ffffffff ls:        0 me: 7fffffff ms: 80000000   |		es: fffffffd ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2		      |	Trying to insert node between -1 and -3 II: 3
	insert at cycle 0   %4:intregs = PHI %2:intregs, %bb. |		insert at cycle -2   %4:intregs = PHI %2:intregs, %bb
	es: 80000000 ls:        1 me: 7fffffff ms: 80000000   |		es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 0 II: 2		      |	Trying to insert node between 0 and -2 II: 3
	insert at cycle 1   %7:intregs = PHI %3:intregs, %bb. |		insert at cycle 0   %7:intregs = PHI %3:intregs, %bb.
	es: ffffffff ls:        1 me: 7fffffff ms: 80000000   |		es: fffffffd ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2		      |	Trying to insert node between -1 and -3 II: 3
	insert at cycle 0   %6:intregs = PHI %1:intregs, %bb. |		insert at cycle -2   %6:intregs = PHI %1:intregs, %bb
cycle 0 (0) (0) %4:intregs = PHI %2:intregs, %bb.1, %10:intre |	cycle -2 (0) (0) %4:intregs = PHI %2:intregs, %bb.1, %10:intr
cycle 0 (0) (1) %6:intregs = PHI %1:intregs, %bb.1, %8:intreg |	cycle -2 (0) (1) %6:intregs = PHI %1:intregs, %bb.1, %8:intre
cycle 0 (0) (3) %8:intregs = L2_loadri_io %4:intregs, -8 :: ( |	cycle -2 (1) (5) S2_storeri_io %4:intregs, 0, %16:intregs :: 
cycle 0 (0) (6) %10:intregs = A2_addi %4:intregs, -4	      |	cycle -1 (0) (3) %8:intregs = L2_loadri_io %4:intregs, -8 :: 
cycle 1 (0) (2) %7:intregs = PHI %3:intregs, %bb.1, %6:intreg |	cycle -1 (0) (6) %10:intregs = A2_addi %4:intregs, -4
cycle 1 (0) (4) %16:intregs = nsw A2_sub %7:intregs, %8:intre |	cycle 0 (0) (2) %7:intregs = PHI %3:intregs, %bb.1, %6:intreg
cycle 1 (0) (5) S2_storeri_io %4:intregs, 0, %16:intregs :: ( |	cycle 0 (0) (4) %16:intregs = nsw A2_sub %7:intregs, %8:intre
No schedule found, return				      |	[stage 0 @-2c] %4:intregs = PHI %2:intregs, %bb.1, %10:intreg
							      >	[stage 0 @-2c] %6:intregs = PHI %1:intregs, %bb.1, %8:intregs
							      >	[stage 1 @-2c] S2_storeri_io %4:intregs, 0, %16:intregs :: (s
							      >	[stage 0 @-1c] %8:intregs = L2_loadri_io %4:intregs, -8 :: (l
							      >	[stage 0 @-1c] %10:intregs = A2_addi %4:intregs, -4
							      >	[stage 0 @0c] %7:intregs = PHI %3:intregs, %bb.1, %6:intregs,
							      >	[stage 0 @0c] %16:intregs = nsw A2_sub %7:intregs, %8:intregs
							      >	 -- padding defaults array from 1 to 2
							      >	Dynamic: TC > 1
		r3 = addasl(r0,r1,#2)			      |			r4 = addasl(r0,r1,#2)
		r4 = add(r2,#-1)			      |			r3 = add(r2,#-1)
		r2 = memw(r0+r2<<#2)			      |			r5 = memw(r0+r2<<#2)
							      >		}
							      >		{
							      >			r6 = add(r3,#-1)
							      >			p0 = cmp.gtu(r3,#1)
							      >			r2 = memw(r1+#-8)
							      >			r0 = memw(r4+#-8)
		loop0(.LBB0_2,r4)			      |			loop0(.LBB0_2,r6)
		r0 = memw(r3+#-8)			      |			r4 = add(r1,#-4)
							      >			r3 = r1
							      >			r5 = sub(r5,r2)
							      >		}
							      >		{
							      >			if (!p0) jump:nt .LBB0_3
		r3 = r0					      |			r6 = r2
		r0 = memw(r1+#-8)			      |			r3 = r4
	}						      |			r2 = memw(r4+#-8)
	{						      |			memw(r1+#0) = r5
		r2 = sub(r2,r0)				      <
		r1 = add(r1,#-4)			      <
		memw(r1+#0) = r2.new			      <
		r2 = r3					      |			r5 = sub(r0,r2)
		nop					      |			r4 = add(r4,#-4)
							      >			r1:0 = combine(r3,r6)
// %bb.3:                               // %for.end	      |	.LBB0_3:                                // %for.body
							      >			memw(r3+#0) = r5
