SU(0):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubl |	Unable to analyzeLoop, can NOT pipeline Loop
  # preds left       : 0				      <
  # succs left       : 1				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 1				      <
  Successors:						      <
    SU(2): Anti Latency=1				      <
SU(1):   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %b <
  # preds left       : 0				      <
  # succs left       : 1				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 0				      <
  Successors:						      <
    SU(2): Data Latency=0 Reg=%3			      <
SU(2):   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.is <
  # preds left       : 2				      <
  # succs left       : 0				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 1				      <
  Height             : 0				      <
  Predecessors:						      <
    SU(1): Data Latency=0 Reg=%3			      <
    SU(0): Anti Latency=1				      <
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0 <
  # preds left       : 0				      <
  # succs left       : 0				      <
  # rdefs left       : 0				      <
  Latency            : 0				      <
  Depth              : 0				      <
  Height             : 0				      <
calculateResMII:					      <
Return Res MII:1					      <
MII = 1 MAX_II = 11 (rec=0, res=1)			      <
SU(1):   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %b <
SU(0):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubl <
SU(2):   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.is <
	Node 0:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 0					      <
	   H    = 1					      <
	   ZLD  = 0					      <
	   ZLH  = 0					      <
	Node 1:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 0					      <
	   H    = 0					      <
	   ZLD  = 0					      <
	   ZLH  = 1					      <
	Node 2:						      <
	   ASAP = 0					      <
	   ALAP = 0					      <
	   MOV  = 0					      <
	   D    = 1					      <
	   H    = 0					      <
	   ZLD  = 1					      <
	   ZLH  = 0					      <
  NodeSet Num nodes 3 rec 0 mov 0 depth 0 col 0		      <
   SU(0) %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubl <
   SU(2) %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.is <
   SU(1) %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %b <
NodeSet size 3						      |	!!! Can not pipeline loop.
  Bottom up (all) 2 1 0 				      <
   Switching order to top down 				      <
Done with Nodeset					      <
Node order:  2  1  0 					      <
Try to schedule with 1					      <
							      <
Inst (2)   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg. <
							      <
	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %19:doubleregs = REG_SEQUENCE %3: <
							      <
Inst (1)   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs,  <
							      <
	es: 80000000 ls:        0 me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %3:intregs = PHI %11:intregs, %bb <
							      <
Inst (0)   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:dou <
							      <
	es:        0 ls: 7fffffff me: 7fffffff ms: 80000000   <
Trying to insert node between 0 and 0 II: 1		      <
	insert at cycle 0   %2:doubleregs = PHI %10:doublereg <
Schedule Found? 1 (II=2)				      <
cycle 0 (0) (1) %3:intregs = PHI %11:intregs, %bb.0, %20:intr <
							      <
cycle 0 (0) (0) %2:doubleregs = PHI %10:doubleregs, %bb.0, %1 <
							      <
cycle 0 (0) (2) %19:doubleregs = REG_SEQUENCE %3:intregs, %su <
							      <
No schedule found, return				      <
	{						      <
		if (p0) jumpr:nt r31			      <
	}						      <
.LBB0_1:                                // %b1		      <
	{						      <
		r0 = asr(r0,#1)				      <
	}						      <
	{						      <
		loop0(.LBB1_1,r0)			      <
		r2 = zxth(r0)				      <
	}						      <
.Ltmp0:                                 // Block address take <
		r5:4 = combine(r3,r2)			      |			jump .LBB1_1
		r3 = r2					      <
	} :endloop0					      <
// %bb.2:                               // %b3		      <
	{						      <
		r3:2 += vdmpy(r5:4,r1:0):sat		      <
	}						      <
	{						      <
		memw(r1+#0) = r2			      <
	}						      <
	{						      <
		r27:26 = memd(##3134984174)		      <
