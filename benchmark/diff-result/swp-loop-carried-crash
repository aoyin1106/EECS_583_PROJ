SU(1):   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load  |	SU(1):   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 
SU(3):   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store |	SU(3):   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store
SU(4):   S4_storeiri_io %1:intregs, 4, 0 :: (store 4 into %ir |	SU(4):   S4_storeiri_io %1:intregs, 4, 0 :: (store (s32) into
  %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from  |	  %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load (s64) f
  S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store 8 into |	  S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store (s64) 
  S4_storeiri_io %1:intregs, 4, 0 :: (store 4 into %ir.cgep7) |	  S4_storeiri_io %1:intregs, 4, 0 :: (store (s32) into %ir.cg
SU(1):   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load  |	SU(1):   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 
SU(3):   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store |	SU(3):   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store
SU(4):   S4_storeiri_io %1:intregs, 4, 0 :: (store 4 into %ir |	SU(4):   S4_storeiri_io %1:intregs, 4, 0 :: (store (s32) into
   SU(4) S4_storeiri_io %1:intregs, 4, 0 :: (store 4 into %ir |	   SU(4) S4_storeiri_io %1:intregs, 4, 0 :: (store (s32) into
   SU(3) S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store |	   SU(3) S2_storerd_io %1:intregs, 0, %8:doubleregs :: (store
   SU(1) %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load  |	   SU(1) %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 
	insert at cycle 0   %1:intregs = PHI %0:intregs, %bb. |		insert at cycle -1   %1:intregs = PHI %0:intregs, %bb
Inst (1)   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (loa |	Inst (1)   %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: (loa
	es:        0 ls: 7fffffff me: 7fffffff ms: 80000000   |		es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2		      |	Trying to insert node between -1 and 0 II: 2
	insert at cycle 0   %7:doubleregs = L2_loadrd_io %1:i |		insert at cycle -1   %7:doubleregs = L2_loadrd_io %1:
							      >		es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
							      >	Trying to insert node between 1 and 2 II: 2
							      >		insert at cycle 1   %8:doubleregs = S2_brevp %7:doubl
							      >
							      >	Inst (3)   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (sto
							      >
	insert at cycle 2   %8:doubleregs = S2_brevp %7:doubl |		insert at cycle 2   S2_storerd_io %1:intregs, 0, %8:d
Inst (3)   S2_storerd_io %1:intregs, 0, %8:doubleregs :: (sto |	Inst (4)   S4_storeiri_io %1:intregs, 4, 0 :: (store (s32) in
	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000   |		es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 4 II: 2		      |	Trying to insert node between 2 and 3 II: 2
	insert at cycle 3   S2_storerd_io %1:intregs, 0, %8:d |		insert at cycle 2   S4_storeiri_io %1:intregs, 4, 0 :
							      >	Schedule Found? 1 (II=2)
							      >	cycle -1 (0) (0) %1:intregs = PHI %0:intregs, %bb.0, %4:intre
Inst (4)   S4_storeiri_io %1:intregs, 4, 0 :: (store 4 into % |	cycle -1 (1) (2) %8:doubleregs = S2_brevp %7:doubleregs
	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000   |	cycle -1 (0) (1) %7:doubleregs = L2_loadrd_io %1:intregs, 0 :
Trying to insert node between 3 and 4 II: 2		      <
	insert at cycle 3   S4_storeiri_io %1:intregs, 4, 0 : <
Schedule Found? 1 (II=3)				      <
cycle 0 (0) (0) %1:intregs = PHI %0:intregs, %bb.0, %4:intreg <
cycle 0 (1) (2) %8:doubleregs = S2_brevp %7:doubleregs	      |	cycle 0 (1) (3) S2_storerd_io %1:intregs, 0, %8:doubleregs ::
cycle 0 (0) (1) %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: |	cycle 0 (1) (4) S4_storeiri_io %1:intregs, 4, 0 :: (store (s3
cycle 1 (1) (3) S2_storerd_io %1:intregs, 0, %8:doubleregs :: |	[stage 0 @-1c] %1:intregs = PHI %0:intregs, %bb.0, %4:intregs
							      |	[stage 1 @-1c] %8:doubleregs = S2_brevp %7:doubleregs
cycle 1 (1) (4) S4_storeiri_io %1:intregs, 4, 0 :: (store 4 i |	[stage 0 @-1c] %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: 
							      |	[stage 1 @0c] S2_storerd_io %1:intregs, 0, %8:doubleregs :: (
[stage 0 @0c] %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, |	[stage 1 @0c] S4_storeiri_io %1:intregs, 4, 0 :: (store (s32)
[stage 1 @0c] %8:doubleregs = S2_brevp %7:doubleregs	      <
[stage 0 @0c] %7:doubleregs = L2_loadrd_io %1:intregs, 0 :: ( <
[stage 1 @1c] S2_storerd_io %1:intregs, 0, %8:doubleregs :: ( <
[stage 1 @1c] S4_storeiri_io %1:intregs, 4, 0 :: (store 4 int <
