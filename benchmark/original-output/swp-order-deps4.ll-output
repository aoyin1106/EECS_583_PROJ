SU(0):   %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%0
    SU(3): Anti Latency=1
SU(1):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%1
    SU(4): Data Latency=0 Reg=%1
    SU(2): Data Latency=0 Reg=%1
    SU(5): Anti Latency=1
SU(2):   %9:intregs = A2_addi %1:intregs, -8
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
  Successors:
    SU(4): Data Latency=1 Reg=%9
    SU(3): Data Latency=0 Reg=%9
SU(3):   %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%9
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=1
  Successors:
    SU(4): Ord  Latency=0 Memory
SU(4):   S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Ord  Latency=0 Memory
    SU(2): Data Latency=1 Reg=%9
    SU(1): Data Latency=0 Reg=%1
SU(5):   %4:intregs = A2_addi %1:intregs, 60
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %9:intregs = A2_addi %1:intregs, -8
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:intregs = A2_addi %1:intregs, 60
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1
SU(2):   %9:intregs = A2_addi %1:intregs, -8
SU(0):   %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1
SU(3):   %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)
SU(4):   S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)
SU(5):   %4:intregs = A2_addi %1:intregs, 60
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 3
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 1
	   ZLH  = 2
	Node 3:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 0
	   ZLD  = 2
	   ZLH  = 1
	Node 4:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 3
	   ZLH  = 0
	Node 5:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1
   SU(3) %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(1) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1
   SU(5) %4:intregs = A2_addi %1:intregs, 60

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1
   SU(3) %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)

  NodeSet Num nodes 3 rec 1 mov 1 depth 1 col 0
   SU(1) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1
   SU(5) %4:intregs = A2_addi %1:intregs, 60
   SU(2) %9:intregs = A2_addi %1:intregs, -8

  NodeSet Num nodes 1 rec 0 mov 0 depth 0 col 0
   SU(4) S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)

NodeSet size 2
  Bottom up (default) 3 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Bottom up (preds) 2 1 5 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Top down (succs) 4 
   Switching order to bottom up 
Done with Nodeset
Node order:  3  0  2  1  5  4 
Try to schedule with 1

Inst (3)   %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)

Inst (0)   %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1

Inst (2)   %9:intregs = A2_addi %1:intregs, -8

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %9:intregs = A2_addi %1:intregs, -8

Inst (1)   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1

Inst (5)   %4:intregs = A2_addi %1:intregs, 60

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %4:intregs = A2_addi %1:intregs, 60

Inst (4)   S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)
Schedule Found? 1 (II=2)
cycle 0 (0) (0) %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1

cycle 0 (0) (1) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1

cycle 0 (1) (4) S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)

cycle 0 (0) (2) %9:intregs = A2_addi %1:intregs, -8

cycle 0 (0) (3) %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)

cycle 0 (0) (5) %4:intregs = A2_addi %1:intregs, 60

[stage 0 @0c] %0:intregs = PHI %6:intregs, %bb.0, %5:intregs, %bb.1
[stage 0 @0c] %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.1
[stage 1 @0c] S2_storeri_io %1:intregs, 0, %9:intregs :: (store 4 into %ir.lsr.iv12)
[stage 0 @0c] %9:intregs = A2_addi %1:intregs, -8
[stage 0 @0c] %5:intregs = S2_storeri_pi %0:intregs(tied-def 0), 4, %9:intregs :: (store 4 into %ir.lsr.iv35)
[stage 0 @0c] %4:intregs = A2_addi %1:intregs, 60
 -- padding defaults array from 1 to 2
Static-true: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r0 = ##g0+6792
		r1 = ##g0+2960
	}
	{
		loop0(.LBB0_1,#63)
		r2 = add(r1,#-8)
		r3 = add(r1,#60)
		memw(r0++#4) = r2.new
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r2 = add(r3,#-8)
		r1 = r3
		memw(r1+#0) = r2
	}
	{
		r3 = add(r3,#60)
		memw(r0++#4) = r2
	} :endloop0
// %bb.2:                               // %b1
	{
		jumpr r31
		memw(r1+#0) = r2
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
