SU(0):   %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(6): Data Latency=0 Reg=%13
    SU(6): Anti Latency=1
SU(1):   %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=0 Reg=%14
    SU(7): Anti Latency=1
SU(2):   %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(8): Data Latency=0 Reg=%15
    SU(8): Anti Latency=1
SU(3):   %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(9): Data Latency=0 Reg=%16
    SU(9): Anti Latency=1
SU(4):   %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(21): Data Latency=0 Reg=%17
    SU(21): Anti Latency=1
SU(5):   %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(20): Data Latency=0 Reg=%18
    SU(20): Anti Latency=1
SU(6):   %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%13
    SU(0): Anti Latency=1
  Successors:
    SU(11): Data Latency=0 Reg=%46
    SU(10): Data Latency=1 Reg=%46
SU(7):   %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%14
    SU(1): Anti Latency=1
  Successors:
    SU(11): Data Latency=1 Reg=%47
    SU(10): Data Latency=0 Reg=%47
SU(8):   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(2): Data Latency=0 Reg=%15
    SU(2): Anti Latency=1
  Successors:
    SU(13): Data Latency=0 Reg=%48
    SU(12): Data Latency=1 Reg=%48
SU(9):   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%16
    SU(3): Anti Latency=1
  Successors:
    SU(13): Data Latency=1 Reg=%49
    SU(12): Data Latency=0 Reg=%49
SU(10):   %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(7): Data Latency=0 Reg=%47
    SU(6): Data Latency=1 Reg=%46
  Successors:
    SU(15): Data Latency=1 Reg=%50
    SU(14): Data Latency=1 Reg=%50
SU(11):   %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(7): Data Latency=1 Reg=%47
    SU(6): Data Latency=0 Reg=%46
  Successors:
    SU(17): Data Latency=1 Reg=%51
    SU(16): Data Latency=1 Reg=%51
SU(12):   %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 4
  Predecessors:
    SU(9): Data Latency=0 Reg=%49
    SU(8): Data Latency=1 Reg=%48
  Successors:
    SU(15): Data Latency=1 Reg=%52
    SU(14): Data Latency=1 Reg=%52
SU(13):   %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(9): Data Latency=1 Reg=%49
    SU(8): Data Latency=0 Reg=%48
  Successors:
    SU(17): Data Latency=1 Reg=%53
    SU(16): Data Latency=1 Reg=%53
SU(14):   %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=%52
    SU(10): Data Latency=1 Reg=%50
  Successors:
    SU(18): Data Latency=2 Reg=%54
SU(15):   %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 3
  Predecessors:
    SU(12): Data Latency=1 Reg=%52
    SU(10): Data Latency=1 Reg=%50
  Successors:
    SU(18): Data Latency=2 Reg=%55
SU(16):   %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(13): Data Latency=1 Reg=%53
    SU(11): Data Latency=1 Reg=%51
  Successors:
    SU(19): Data Latency=2 Reg=%56
SU(17):   %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(13): Data Latency=1 Reg=%53
    SU(11): Data Latency=1 Reg=%51
  Successors:
    SU(19): Data Latency=2 Reg=%57
SU(18):   %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(15): Data Latency=2 Reg=%55
    SU(14): Data Latency=2 Reg=%54
  Successors:
    SU(20): Data Latency=0 Reg=%58
SU(19):   %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(17): Data Latency=2 Reg=%57
    SU(16): Data Latency=2 Reg=%56
  Successors:
    SU(21): Data Latency=0 Reg=%59
SU(20):   %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(18): Data Latency=0 Reg=%58
    SU(5): Data Latency=0 Reg=%18
    SU(5): Anti Latency=1
  Successors:
    SU(21): Ord  Latency=1 Memory
SU(21):   %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(20): Ord  Latency=1 Memory
    SU(19): Data Latency=0 Reg=%59
    SU(4): Data Latency=0 Reg=%17
    SU(4): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.4, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr
ReservedCycles:1, NumCycles:1
Return Res MII:4
MII = 4 MAX_II = 14 (rec=1, res=4)
SU(3):   %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4
SU(9):   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
SU(2):   %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4
SU(8):   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
SU(12):   %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr
SU(1):   %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4
SU(7):   %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)
SU(0):   %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4
SU(6):   %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)
SU(10):   %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr
SU(15):   %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr
SU(14):   %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr
SU(18):   %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr
SU(5):   %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4
SU(20):   %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)
SU(13):   %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr
SU(11):   %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr
SU(17):   %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr
SU(16):   %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr
SU(19):   %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr
SU(4):   %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
SU(21):   %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 6
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 2
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 6
	   ZLD  = 0
	   ZLH  = 2
	Node 3:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 2
	Node 4:
	   ASAP = 0
	   ALAP = 5
	   MOV  = 5
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 5:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 6:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 5
	   ZLD  = 1
	   ZLH  = 1
	Node 7:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 4
	   ZLD  = 1
	   ZLH  = 1
	Node 8:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 5
	   ZLD  = 1
	   ZLH  = 1
	Node 9:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 4
	   ZLD  = 1
	   ZLH  = 1
	Node 10:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 4
	   ZLD  = 2
	   ZLH  = 0
	Node 11:
	   ASAP = 1
	   ALAP = 2
	   MOV  = 1
	   D    = 2
	   H    = 3
	   ZLD  = 2
	   ZLH  = 0
	Node 12:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 4
	   ZLD  = 2
	   ZLH  = 0
	Node 13:
	   ASAP = 1
	   ALAP = 2
	   MOV  = 1
	   D    = 2
	   H    = 3
	   ZLD  = 2
	   ZLH  = 0
	Node 14:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 3
	   ZLD  = 0
	   ZLH  = 0
	Node 15:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 3
	   ZLD  = 0
	   ZLH  = 0
	Node 16:
	   ASAP = 2
	   ALAP = 3
	   MOV  = 1
	   D    = 3
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 17:
	   ASAP = 2
	   ALAP = 3
	   MOV  = 1
	   D    = 3
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 18:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 19:
	   ASAP = 4
	   ALAP = 5
	   MOV  = 1
	   D    = 5
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 20:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 21:
	   ASAP = 5
	   ALAP = 5
	   MOV  = 0
	   D    = 6
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(0) %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4
   SU(6) %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 1
   SU(1) %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4
   SU(7) %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 2
   SU(2) %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4
   SU(8) %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 2
   SU(3) %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4
   SU(9) %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)

  Rec NodeSet Num nodes 2 rec 1 mov 5 depth 6 col 0
   SU(4) %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
   SU(21) %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)

  Rec NodeSet Num nodes 2 rec 1 mov 4 depth 5 col 0
   SU(5) %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4
   SU(20) %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(0) %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4
   SU(6) %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 1
   SU(1) %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4
   SU(7) %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 2
   SU(2) %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4
   SU(8) %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 2
   SU(3) %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4
   SU(9) %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)

  NodeSet Num nodes 7 rec 1 mov 4 depth 5 col 0
   SU(5) %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4
   SU(20) %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)
   SU(18) %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr
   SU(15) %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr
   SU(14) %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr
   SU(10) %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr
   SU(12) %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr

  NodeSet Num nodes 7 rec 1 mov 5 depth 6 col 0
   SU(4) %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
   SU(21) %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)
   SU(19) %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr
   SU(17) %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr
   SU(16) %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr
   SU(11) %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr
   SU(13) %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr

NodeSet size 2
  Bottom up (default) 6 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 7 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 8 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 9 3 
   Switching order to top down 
Done with Nodeset
NodeSet size 7
  Top down (intersect) 10 12 15 14 18 20 5 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 7
  Top down (succs) 11 13 17 16 19 21 4 
   Switching order to bottom up 
Done with Nodeset
Node order:  6  0  7  1  8  2  9  3  10  12  15  14  18  20  5  11  13  17  16  19  21  4 
Try to schedule with 4

Inst (6)   %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	insert at cycle 0   %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)

Inst (0)   %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4

	es: fffffffd ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -3 II: 4
	insert at cycle 0   %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4

Inst (7)   %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	failed to insert at cycle 0   %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)
	insert at cycle 1   %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)

Inst (1)   %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4

	es: fffffffe ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -2 II: 4
	insert at cycle 1   %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4

Inst (8)   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	failed to insert at cycle 0   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
	failed to insert at cycle 1   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
	insert at cycle 2   %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)

Inst (2)   %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4

	es: ffffffff ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and -1 II: 4
	insert at cycle 2   %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4

Inst (9)   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	failed to insert at cycle 0   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
	failed to insert at cycle 1   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
	failed to insert at cycle 2   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
	insert at cycle 3   %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)

Inst (3)   %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4

	es:        0 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 0 II: 4
	insert at cycle 3   %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4

Inst (10)   %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 4 II: 4
	insert at cycle 1   %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr

Inst (12)   %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr

	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 6 II: 4
	insert at cycle 3   %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr

Inst (15)   %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 7 II: 4
	insert at cycle 4   %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr

Inst (14)   %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 7 II: 4
	insert at cycle 4   %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr

Inst (18)   %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr

	es:        6 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 6 and 9 II: 4
	insert at cycle 6   %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr

Inst (20)   %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)

	es:        6 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 6 and 9 II: 4
	insert at cycle 6   %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)

Inst (5)   %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4

	es:        3 ls:        6 me: 7fffffff ms: 80000000
Trying to insert node between 6 and 3 II: 4
	insert at cycle 6   %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4

Inst (11)   %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 5 II: 4
	insert at cycle 2   %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr

Inst (13)   %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 7 II: 4
	insert at cycle 4   %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr

Inst (17)   %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr

	es:        5 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 5 and 8 II: 4
	insert at cycle 5   %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr

Inst (16)   %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr

	es:        5 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 5 and 8 II: 4
	insert at cycle 5   %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr

Inst (19)   %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr

	es:        7 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 7 and 10 II: 4
	insert at cycle 7   %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr

Inst (21)   %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)

	es:        7 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 7 and 10 II: 4
	insert at cycle 7   %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)

Inst (4)   %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4

	es:        4 ls:        7 me: 7fffffff ms: 80000000
Trying to insert node between 7 and 4 II: 4
	insert at cycle 7   %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
Schedule Found? 1 (II=5)
cycle 0 (0) (0) %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4

cycle 0 (1) (15) %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr

cycle 0 (1) (14) %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr

cycle 0 (1) (13) %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr

cycle 0 (0) (6) %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)

cycle 1 (0) (1) %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4

cycle 1 (1) (17) %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr

cycle 1 (1) (16) %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr

cycle 1 (0) (7) %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)

cycle 1 (0) (10) %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr

cycle 2 (1) (5) %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4

cycle 2 (0) (2) %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4

cycle 2 (1) (18) %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr

cycle 2 (1) (20) %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)

cycle 2 (0) (8) %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)

cycle 2 (0) (11) %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr

cycle 3 (1) (4) %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4

cycle 3 (0) (3) %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4

cycle 3 (1) (19) %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr

cycle 3 (1) (21) %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)

cycle 3 (0) (9) %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)

cycle 3 (0) (12) %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr

[stage 0 @0c] %13:intregs = PHI %11:intregs, %bb.3, %20:intregs, %bb.4
[stage 1 @0c] %55:hvxvr = V6_vnavgh %50:hvxvr, %52:hvxvr
[stage 1 @0c] %54:hvxvr = V6_vavgh %50:hvxvr, %52:hvxvr
[stage 1 @0c] %53:hvxvr = V6_vsubh %48:hvxvr, %49:hvxvr
[stage 0 @0c] %46:hvxvr, %20:intregs = V6_vL32b_pi %13:intregs(tied-def 1), 64 :: (load 64 from %ir.v28)
[stage 0 @1c] %14:intregs = PHI %10:intregs, %bb.3, %21:intregs, %bb.4
[stage 1 @1c] %57:hvxvr = V6_vnavgh %51:hvxvr, %53:hvxvr
[stage 1 @1c] %56:hvxvr = V6_vavgh %51:hvxvr, %53:hvxvr
[stage 0 @1c] %47:hvxvr, %21:intregs = V6_vL32b_pi %14:intregs(tied-def 1), 64 :: (load 64 from %ir.v29)
[stage 0 @1c] %50:hvxvr = V6_vaddh %46:hvxvr, %47:hvxvr
[stage 1 @2c] %18:intregs = PHI %7:intregs, %bb.3, %24:intregs, %bb.4
[stage 0 @2c] %15:intregs = PHI %9:intregs, %bb.3, %22:intregs, %bb.4
[stage 1 @2c] %58:hvxvr = V6_vsathub %55:hvxvr, %54:hvxvr
[stage 1 @2c] %24:intregs = V6_vS32b_pi %18:intregs(tied-def 0), 64, %58:hvxvr :: (store 64 into %ir.v33)
[stage 0 @2c] %48:hvxvr, %22:intregs = V6_vL32b_pi %15:intregs(tied-def 1), 64 :: (load 64 from %ir.v30)
[stage 0 @2c] %51:hvxvr = V6_vsubh %46:hvxvr, %47:hvxvr
[stage 1 @3c] %17:intregs = PHI %6:intregs, %bb.3, %25:intregs, %bb.4
[stage 0 @3c] %16:intregs = PHI %8:intregs, %bb.3, %23:intregs, %bb.4
[stage 1 @3c] %59:hvxvr = V6_vsathub %57:hvxvr, %56:hvxvr
[stage 1 @3c] %25:intregs = V6_vS32b_pi %17:intregs(tied-def 0), 64, %59:hvxvr :: (store 64 into %ir.v32)
[stage 0 @3c] %49:hvxvr, %23:intregs = V6_vL32b_pi %16:intregs(tied-def 1), 64 :: (load 64 from %ir.v31)
[stage 0 @3c] %52:hvxvr = V6_vaddh %48:hvxvr, %49:hvxvr
Dynamic: TC > 1

!!! Can not pipeline loop.
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		p0 = cmp.gt(r2,#0)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %b1
	{
		r8 = asr(r1,#31)
		r2 = asr(r3,#2)
		r7 = add(r2,#1)
		p0 = cmp.gt(r1,#63)
	}
	{
		r1 += lsr(r8,#26)
		r6 = asr(r3,#1)
	}
	{
		r9 = lsr(r7,#1)
		r1 = asr(r1,#6)
		r7 = #0
		r8 = add(r6,r2)
	}
	{
		loop1(.LBB0_2,r9)
		jump .LBB0_2
	}
	.p2align	4
.LBB0_5:                                // %b4
                                        //   in Loop: Header=BB0_2 Depth=1
	{
		v3.h = vsub(v3.h,v4.h)
		v27.h = vnavg(v0.h,v2.h)
		v28.h = vavg(v0.h,v2.h)
	}
	{
		v29.h = vnavg(v1.h,v3.h)
		v30.h = vavg(v1.h,v3.h)
	}
	{
		v0.ub = vsat(v27.h,v28.h)
		vmem(r12++#1) = v0.new
	}
	{
		v31.ub = vsat(v29.h,v30.h)
		vmem(r9++#1) = v31.new
	}
.LBB0_6:                                // %b6
                                        //   in Loop: Header=BB0_2 Depth=1
	{
		r7 = add(r7,#2)
		nop
		nop
	} :endloop1
	{
		jump .LBB0_7
	}
.Ltmp0:                                 // Block address taken
.LBB0_2:                                // %b2
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_4 Depth 2
	{
		if (!p0) jump:nt .LBB0_6
	}
// %bb.3:                               // %b3
                                        //   in Loop: Header=BB0_2 Depth=1
	{
		r13 = asr(r7,#1)
		r9 = r4
		r14 = add(r7,#1)
		r12 = r4
	}
	{
		r15 = mpyi(r13,r3)
		r9 += mpyi(r14,r5)
		r10 = add(r1,#-1)
		p1 = cmp.gtu(r1,#1)
	}
	{
		r14 = addasl(r0,r15,#1)
		r28 = add(r15,r2)
		r11 = add(r15,r6)
		r13 = add(r8,r15)
	}
	{
		r15 = addasl(r0,r28,#1)
		r28 = addasl(r0,r11,#1)
	}
	{
		r13 = addasl(r0,r13,#1)
		r12 += mpyi(r7,r5)
		v1 = vmem(r14++#1)
	}
	{
		loop0(.LBB0_4,r10)
		v0.h = vadd(v1.h,v2.h)
		v2.cur = vmem(r28++#1)
	}
	{
		v1.h = vsub(v1.h,v2.h)
		v3 = vmem(r15++#1)
	}
	{
		if (!p1) jump:nt .LBB0_5
		v2.h = vadd(v3.h,v4.h)
		v4.cur = vmem(r13++#1)
	}
	.p2align	4
.Ltmp1:                                 // Block address taken
.LBB0_4:                                // %b4
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	{
		v3.h = vsub(v3.h,v4.h)
		v5.h = vnavg(v0.h,v2.h)
		v2.h = vavg(v0.h,v2.h)
		v4 = vmem(r14++#1)
	}
	{
		v7.h = vnavg(v1.h,v3.h)
		v8.h = vavg(v1.h,v3.h)
		v0.h = vadd(v4.h,v6.h)
		v6.cur = vmem(r28++#1)
	}
	{
		v1.ub = vsat(v5.h,v2.h)
		v3 = vmem(r15++#1)
		vmem(r12++#1) = v1.new
	}
	{
		v5.ub = vsat(v7.h,v8.h)
		v1.h = vsub(v4.h,v6.h)
		v4 = vmem(r13++#1)
		vmem(r9++#1) = v5.new
	}
	{
		nop
		v2.h = vadd(v3.h,v4.h)
	} :endloop0
	{
		jump .LBB0_5
	}
.LBB0_7:                                // %b8
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
