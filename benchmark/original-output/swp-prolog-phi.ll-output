SU(0):   %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%2
    SU(5): Anti Latency=1
SU(1):   %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%3
    SU(4): Anti Latency=1
SU(2):   %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
  Successors:
    SU(3): Data Latency=1 Reg=%12
SU(3):   %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=1 Reg=%12
  Successors:
    SU(4): Data Latency=1 Reg=%14
SU(4):   %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%14
    SU(1): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
SU(5):   %20:hvxvr = COPY %6.vsub_hi:hvxwr
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(0):   %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2
SU(2):   %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr
SU(3):   %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr
SU(1):   %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2
SU(4):   %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr
SU(5):   %20:hvxvr = COPY %6.vsub_hi:hvxwr
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 4:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 1
	   H    = 0
	   ZLD  = 0
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 2 depth 2 col 0
   SU(1) %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2
   SU(4) %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr

  NodeSet Num nodes 2 rec 1 mov 2 depth 2 col 0
   SU(1) %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2
   SU(4) %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr

  NodeSet Num nodes 4 rec 0 mov 0 depth 0 col 0
   SU(3) %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr
   SU(2) %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr
   SU(0) %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2
   SU(5) %20:hvxvr = COPY %6.vsub_hi:hvxwr

NodeSet size 2
  Bottom up (default) 4 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 4
  Bottom up (preds) 3 2 0 5 
   Switching order to top down 
Done with Nodeset
Node order:  4  1  3  2  0  5 
Try to schedule with 1

Inst (4)   %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr

Inst (1)   %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2

	es:        2 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2

Inst (3)   %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr

Inst (2)   %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr

Inst (0)   %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2

Inst (5)   %20:hvxvr = COPY %6.vsub_hi:hvxwr

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %20:hvxvr = COPY %6.vsub_hi:hvxwr
Schedule Found? 1 (II=2)
cycle 0 (2) (1) %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2

cycle 0 (0) (0) %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2

cycle 0 (2) (4) %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr

cycle 0 (1) (3) %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr

cycle 0 (0) (2) %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr

cycle 0 (0) (5) %20:hvxvr = COPY %6.vsub_hi:hvxwr

[stage 2 @0c] %3:hvxvr = PHI %7:hvxvr, %bb.1, %4:hvxvr, %bb.2
[stage 0 @0c] %2:hvxvr = PHI %11:hvxvr, %bb.1, %20:hvxvr, %bb.2
[stage 2 @0c] %4:hvxvr = V6_vaddhq %14:hvxqr, %3:hvxvr(tied-def 0), %17:hvxvr
[stage 1 @0c] %14:hvxqr = V6_veqh_and %12:hvxqr(tied-def 0), %15:hvxvr, %16:hvxvr
[stage 0 @0c] %12:hvxqr = V6_vgtuh %2:hvxvr, %13:hvxvr
[stage 0 @0c] %20:hvxvr = COPY %6.vsub_hi:hvxwr
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		if (p0) jump:nt .LBB0_4
	}
// %bb.1:                               // %b1
	{
		p0 = cmp.gtu(r0,#1); if (!p0.new) jump:t .LBB0_4
		r1 = add(r0,#-2)
	}
// %bb.2:                               // %b3
	{
		loop0(.LBB0_3,r1)
		if (!p0.new) jumpr:nt r31
		p0 = cmp.gtu(r0,#2)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_3:                                // %b3
                                        // =>This Inner Loop Header: Depth=1
	{
		nop
		nop
	} :endloop0
.LBB0_4:                                // %b5
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
