SU(0):   %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%1
    SU(5): Anti Latency=1
SU(1):   %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(6): Data Latency=0 Reg=%2
    SU(2): Data Latency=0 Reg=%2
    SU(6): Anti Latency=1
SU(2):   %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
  Successors:
    SU(3): Data Latency=0 Reg=%3
SU(3):   %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Successors:
    SU(4): Data Latency=3 Reg=%10
SU(4):   %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(3): Data Latency=3 Reg=%10
  Successors:
    SU(5): Data Latency=0 Reg=%11
    SU(5): Ord  Latency=0 Memory
SU(5):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%11
    SU(4): Ord  Latency=0 Memory
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
SU(6):   %4:intregs = nsw A2_addi %2:intregs, -1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:intregs = nsw A2_addi %2:intregs, -1
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2
SU(2):   %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2
SU(3):   %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1
SU(4):   %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
SU(0):   %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2
SU(5):   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)
SU(6):   %4:intregs = nsw A2_addi %2:intregs, -1
	Node 0:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 2
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 2
	   ZLH  = 0
	Node 4:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 5:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 6:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2
   SU(5) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(1) %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2
   SU(6) %4:intregs = nsw A2_addi %2:intregs, -1

  Rec NodeSet Num nodes 2 rec 0 mov 0 depth 3 col 0
   SU(4) %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
   SU(5) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2
   SU(5) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

  NodeSet Num nodes 5 rec 1 mov 3 depth 1 col 0
   SU(1) %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2
   SU(6) %4:intregs = nsw A2_addi %2:intregs, -1
   SU(4) %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
   SU(3) %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1
   SU(2) %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2

NodeSet size 2
  Bottom up (default) 5 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 5
  Bottom up (preds) 4 3 2 1 6 
   Switching order to top down 
Done with Nodeset
Node order:  5  0  4  3  2  1  6 
Try to schedule with 1

Inst (5)   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 3 II: 1
	insert at cycle 3   %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

Inst (0)   %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2

	es:        3 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 3 II: 1
	insert at cycle 3   %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2

Inst (4)   %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)

	es: 80000000 ls:        3 me: 7fffffff ms:        3
Trying to insert node between 3 and 3 II: 1
	insert at cycle 3   %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)

Inst (3)   %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1

Inst (2)   %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2

Inst (1)   %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2

Inst (6)   %4:intregs = nsw A2_addi %2:intregs, -1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %4:intregs = nsw A2_addi %2:intregs, -1
Schedule Found? 1 (II=1)
cycle 0 (3) (0) %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2

cycle 0 (0) (2) %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2

cycle 0 (0) (1) %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2

cycle 0 (3) (4) %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)

cycle 0 (3) (5) %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)

cycle 0 (0) (3) %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1

cycle 0 (0) (6) %4:intregs = nsw A2_addi %2:intregs, -1

[stage 3 @0c] %1:intregs = PHI %7:intregs, %bb.1, %5:intregs, %bb.2
[stage 0 @0c] %3:intregs = PHI %6:intregs, %bb.1, %2:intregs, %bb.2
[stage 0 @0c] %2:intregs = PHI %9:intregs, %bb.1, %4:intregs, %bb.2
[stage 3 @0c] %11:intregs = L2_loadruh_io %10:intregs, -4 :: (load (s16) from %ir.cgep2, !tbaa !0)
[stage 3 @0c] %5:intregs = S2_storerh_pi %1:intregs(tied-def 0), -2, %11:intregs :: (store (s16) into %ir.lsr.iv, !tbaa !0)
[stage 0 @0c] %10:intregs = S2_addasl_rrri %7:intregs, %3:intregs, 1
[stage 0 @0c] %4:intregs = nsw A2_addi %2:intregs, -1
Dynamic: TC > 3
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		if (p0) jumpr:nt r31
	}
.LBB0_1:                                // %b2.preheader
	{
		r0 = addasl(r1,r0,#1)
		r4 = add(r0,#-3)
		p0 = cmp.gtu(r0,#1)
	}
	{
		if (!p0) jump:nt .LBB0_8
		r3 = add(r0,#-1)
	}
// %bb.2:                               // %b2
	{
		r2 = addasl(r1,r0,#1)
		p0 = cmp.gtu(r0,#2); if (!p0.new) jump:t .LBB0_7
		r5 = add(r3,#-1)
	}
// %bb.3:                               // %b2
	{
		loop0(.LBB0_5,r4)
		r3 = addasl(r1,r3,#1)
		p0 = cmp.gtu(r0,#3)
		r6 = add(r5,#-1)
	}
	{
		if (p0) jump:nt .LBB0_5
		r4 = r1
	}
// %bb.4:
	{
		r7 = r0 ; jump .LBB0_6
		r4 = r1
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_5:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r3 = addasl(r1,r5,#1)
		r7 = r2
		r2 = r3
		r0 = memuh(r0+#-4)
	}
	{
		r5 = r6
		r6 = add(r6,#-1)
		r0 = r7
		memh(r4++#-2) = r0
	} :endloop0
.LBB0_6:                                // %b2
	{
		r0 = memuh(r7+#-4)
		memh(r4++#-2) = r0.new
	}
	{
		r1:0 = combine(r4,r2)
		r2 = r3
	}
.LBB0_7:                                // %b2
	{
		r0 = memuh(r0+#-4)
		memh(r1++#-2) = r0.new
	}
	{
		r0 = r2
	}
.LBB0_8:                                // %b2
	{
		jumpr r31
		r0 = memuh(r0+#-4)
		memh(r1++#-2) = r0.new
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
