SU(0):   %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%3
    SU(4): Data Latency=0 Reg=%3
    SU(2): Data Latency=0 Reg=%3
    SU(5): Anti Latency=1
SU(1):   %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=0 Reg=%5
    SU(4): Data Latency=0 Reg=%5
    SU(3): Data Latency=0 Reg=%5
    SU(6): Anti Latency=1
SU(2):   %14:intregs = A2_addi %3:intregs, -10
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%3
  Successors:
    SU(3): Data Latency=0 Reg=%14
SU(3):   S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%14
    SU(1): Data Latency=0 Reg=%5
SU(4):   S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
    SU(0): Data Latency=0 Reg=%3
SU(5):   %7:intregs = A2_addi %3:intregs, 10
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%3
    SU(0): Anti Latency=1
SU(6):   %8:intregs = A2_addi %5:intregs, 4
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %8:intregs = A2_addi %5:intregs, 4
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:intregs = A2_addi %3:intregs, -10
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs = A2_addi %3:intregs, 10
ReservedCycles:0, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 2 (rec=1, res=2)
SU(0):   %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
SU(2):   %14:intregs = A2_addi %3:intregs, -10
SU(1):   %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2
SU(3):   S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)
SU(4):   S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)
SU(5):   %7:intregs = A2_addi %3:intregs, 10
SU(6):   %8:intregs = A2_addi %5:intregs, 4
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 1
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 6:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = A2_addi %3:intregs, 10

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2
   SU(6) %8:intregs = A2_addi %5:intregs, 4

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = A2_addi %3:intregs, 10

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2
   SU(6) %8:intregs = A2_addi %5:intregs, 4

  NodeSet Num nodes 3 rec 0 mov 0 depth 0 col 0
   SU(4) S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)
   SU(2) %14:intregs = A2_addi %3:intregs, -10
   SU(3) S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)

NodeSet size 2
  Bottom up (default) 5 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 6 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Top down (succs) 2 4 3 
   Switching order to bottom up 
Done with Nodeset
Node order:  5  0  6  1  2  4  3 
Try to schedule with 2

Inst (5)   %7:intregs = A2_addi %3:intregs, 10

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %7:intregs = A2_addi %3:intregs, 10

Inst (0)   %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

Inst (6)   %8:intregs = A2_addi %5:intregs, 4

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %8:intregs = A2_addi %5:intregs, 4

Inst (1)   %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2

	es: fffffffe ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -2 II: 2
	insert at cycle -1   %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2

Inst (2)   %14:intregs = A2_addi %3:intregs, -10

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %14:intregs = A2_addi %3:intregs, -10

Inst (4)   S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle 0   S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)

Inst (3)   S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)
Schedule Found? 1 (II=2)
cycle -1 (0) (0) %3:intregs = PHI %1:intregs, %bb.1, %7:intregs, %bb.2

cycle -1 (0) (1) %5:intregs = PHI %2:intregs, %bb.1, %8:intregs, %bb.2

cycle -1 (0) (6) %8:intregs = A2_addi %5:intregs, 4

cycle -1 (0) (2) %14:intregs = A2_addi %3:intregs, -10

cycle -1 (0) (3) S2_storeri_io %5:intregs, 0, %14:intregs :: (store (s32) into %ir.v6)

cycle 0 (0) (4) S2_storeri_io %5:intregs, -4, %3:intregs :: (store (s32) into %ir.cgep2)

cycle 0 (0) (5) %7:intregs = A2_addi %3:intregs, 10

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		p0 = cmp.gt(r1,#1)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %b1
	{
		r3 = add(r1,#-1)
		r2 = memw(r0++#4)
	}
	{
		loop0(.LBB0_2,r3)
		r1 = add(r2,#20)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_2:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r2 = add(r1,#-10)
		memw(r0+#-4) = r1
	}
	{
		r0 = add(r0,#4)
		r1 = add(r1,#10)
		memw(r0+#0) = r2
	} :endloop0
// %bb.3:                               // %b4
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
