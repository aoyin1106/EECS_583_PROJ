	.text
	.file	"<stdin>"
	.hidden	f0                              // -- Begin function f0
	.globl	f0
	.p2align	2
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r29 = add(r29,#-16)
		r4 = memw(r0+#264)
	}
	{
		memd(r29+#8) = r17:16
		memd(r29+#0) = r19:18
	}                                       // 8-byte Folded Spill
	{
		p0 = cmp.gt(r4,#0); if (!p0.new) jump:nt .LBB0_10
	}
// %bb.1:                               // %b1
	{
		r5:4 = combine(#0,#0)
		r3 = memw(r3+#0)
	}
.LBB0_2:                                // %b2
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_3 Depth 2
                                        //       Child Loop BB0_6 Depth 3
	{
		loop1(.LBB0_3,#2)
		r6 = addasl(r2,r5,#2)
		r7 = #0
		r8 = r4
	}
.Ltmp0:                                 // Block address taken
.LBB0_3:                                // %b3
                                        //   Parent Loop BB0_2 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_6 Depth 3
	{
		p0 = cmp.eq(r7,#0)
		r15 = memw(r6+#0)
		r9 = memw(r3+r8<<#2)
	}
	{
		r12 = mux(p0,#-1,#1)
	}
	{
		r12 = add(r12,r5)
		r13 = memub(r15+#0)
		r28 = memub(r15+#1)
	}
	{
		r10 = memw(r2+r12<<#2)
	}
	{
		r14 = memub(r10+#0)
	}
	{
		r14 += mpyi(r13,#3)
		r12 = memub(r10+#1)
	}
	{
		r12 += mpyi(r28,#3)
		r13 = r14
	}
	{
		r13 = add(#8,asl(r13,#2))
		r11 = +mpyi(r14,#3)
	}
	{
		r28 = add(r11,add(r12,#7))
		r13 = lsr(r13,#4)
		memb(r9+#0) = r13.new
	}
	{
		r13 = lsr(r28,#4)
		memb(r9+#1) = r13.new
	}
	{
		r13 = add(r9,#2)
		r28 = memw(r1+#40)
	}
	{
		r16 = add(r28,#-2)
		if (cmp.eq(r16.new,#0)) jump:nt .LBB0_4
	}
// %bb.5:                               // %b4
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		loop0(.LBB0_6,r16)
		r28 = asl(r28,#1)
		r10 = add(r10,#2)
		r11 = add(r15,#2)
	}
.Ltmp1:                                 // Block address taken
.LBB0_6:                                // %b5
                                        //   Parent Loop BB0_2 Depth=1
                                        //     Parent Loop BB0_3 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	{
		r15 = r12
		r16 = memub(r11++#1)
		r12 = memub(r10++#1)
	}
	{
		r17 = +mpyi(r15,#3)
	}
	{
		r12 += mpyi(r16,#3)
		r18 = add(r14,add(r17,#8))
		r14 = r15
	}
	{
		r17 = add(r17,add(r12,#7))
		r19 = lsr(r18,#4)
		memb(r13+#0) = r19.new
	}
	{
		r18 = lsr(r17,#4)
		r13 = add(r13,#2)
		memb(r13+#1) = r18.new
	} :endloop0
// %bb.7:                               // %b6
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		r9 = add(r28,r9)
	}
	{
		jump .LBB0_8
		r13 = add(r9,#-2)
		r9 = add(r9,#-4)
	}
.LBB0_4:                                //   in Loop: Header=BB0_3 Depth=2
	{
		r15 = r14
	}
.LBB0_8:                                // %b7
                                        //   in Loop: Header=BB0_3 Depth=2
	{
		r14 = +mpyi(r12,#3)
		r12 = add(#7,asl(r12,#2))
		r8 = add(r8,#1)
		r7 = add(r7,#1)
	}
	{
		r14 = add(r15,add(r14,#8))
		r12 = lsr(r12,#4)
	}
	{
		r14 = lsr(r14,#4)
		memb(r13+#0) = r14.new
	}
	{
		nop
		nop
		memb(r9+#3) = r12
	} :endloop1
// %bb.9:                               // %b8
                                        //   in Loop: Header=BB0_2 Depth=1
	{
		r5 = add(r5,#1)
		r6 = memw(r0+#264)
	}
	{
		r4 = add(r4,#2)
		if (cmp.gt(r6,r4.new)) jump:t .LBB0_2
	}
.LBB0_10:                               // %b10
	{
		r29 = add(r29,#16)
		jumpr r31
		r17:16 = memd(r29+#8)
		r19:18 = memd(r29+#0)
	}                                       // 8-byte Folded Reload
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
