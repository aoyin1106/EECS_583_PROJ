Unable to analyzeLoop, can NOT pipeline Loop

!!! Can not pipeline loop.
SU(0):   %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%6
    SU(4): Anti Latency=1
SU(1):   %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%7
    SU(2): Anti Latency=1
SU(2):   %8:intregs = A2_addi %7:intregs, 1
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%7
    SU(1): Anti Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=%8
SU(3):   S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)
  # preds left       : 1
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%8
SU(4):   %9:intregs = A2_addi %6:intregs, 8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%6
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.10, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %8:intregs = A2_addi %7:intregs, 1
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %9:intregs = A2_addi %6:intregs, 8
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10
SU(2):   %8:intregs = A2_addi %7:intregs, 1
SU(3):   S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)
SU(0):   %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10
SU(4):   %9:intregs = A2_addi %6:intregs, 8
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 0
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10
   SU(4) %9:intregs = A2_addi %6:intregs, 8

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10
   SU(2) %8:intregs = A2_addi %7:intregs, 1

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10
   SU(2) %8:intregs = A2_addi %7:intregs, 1

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10
   SU(4) %9:intregs = A2_addi %6:intregs, 8

  NodeSet Num nodes 1 rec 0 mov 0 depth 0 col 0
   SU(3) S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 4 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Top down (succs) 3 
   Switching order to bottom up 
Done with Nodeset
Node order:  2  1  4  0  3 
Try to schedule with 1

Inst (2)   %8:intregs = A2_addi %7:intregs, 1

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %8:intregs = A2_addi %7:intregs, 1

Inst (1)   %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10

Inst (4)   %9:intregs = A2_addi %6:intregs, 8

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %9:intregs = A2_addi %6:intregs, 8

Inst (0)   %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10

Inst (3)   S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)
Schedule Found? 1 (II=2)
cycle 0 (0) (1) %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10

cycle 0 (0) (0) %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10

cycle 0 (1) (3) S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)

cycle 0 (0) (2) %8:intregs = A2_addi %7:intregs, 1

cycle 0 (0) (4) %9:intregs = A2_addi %6:intregs, 8

[stage 0 @0c] %7:intregs = PHI %2:intregs, %bb.9, %8:intregs, %bb.10
[stage 0 @0c] %6:intregs = PHI %5:intregs, %bb.9, %9:intregs, %bb.10
[stage 1 @0c] S2_storerigp @g3, %8:intregs, implicit $gp :: (store 4 into @g3)
[stage 0 @0c] %8:intregs = A2_addi %7:intregs, 1
[stage 0 @0c] %9:intregs = A2_addi %6:intregs, 8
Dynamic: TC > 1

!!! Can not pipeline loop.
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r1 = memw(gp+#g0)
	}
	{
		r2 = memw(r0+#0)
		if (cmp.eq(r2.new,#1)) jump:nt .LBB0_2
	}
// %bb.1:                               // %b0
	{
		r0 = ##g3
		p0 = cmp.eq(r2,#0)
	}
	{
		if (!p0) jumpr:nt r31
		if (p0) memw(r0+#0) = #0
	}
.LBB0_2:                                // %b2
	{
		r5 = asr(r2,#31)
		r3 = add(r2,#-1)
		r0 = #1
		r4 = r2
	}
	{
		r4 += lsr(r5,#30)
		r3 = and(r3,#-4)
		p0 = cmp.gt(r2,#-4)
		p2 = cmp.gt(r2,#0)
	}
	{
		p1 = cmp.eq(r1,#0)
		r2 = ##g3
		r3 = add(r3,#4)
	}
	{
		r0 += asr(r4,#2)
	}
	{
		jump .LBB0_3
		if (!p0) r0 = #1
	}
	.p2align	4
.LBB0_9:                                // %b10
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		memw(gp+#g3) = r4
	}
.LBB0_10:                               // %b13
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		if (p0) memw(##g3) = r0
	}
.LBB0_3:                                // %b4
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_8 Depth 2
	{
		if (!p1) jump:nt .LBB0_4
	}
// %bb.5:                               // %b6
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		if (!p2) jump:nt .LBB0_10
		if (!p2) memw(r2+#0) = #0
	}
// %bb.6:                               // %b8
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		if (p0) jump:nt .LBB0_10
	}
// %bb.7:                               // %b9
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		r4 = sub(#0,r3)
		r5 = memw(gp+#g4)
	}
	{
		r6 = add(r4,#-1)
	}
	{
		p3 = cmp.gtu(r4,#1)
		r4 = add(r3,#1)
	}
	{
		loop0(.LBB0_8,r6)
		if (!p3) jump:nt .LBB0_9
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_8:                                // %b10
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	{
		r4 = add(r4,#1)
		memw(gp+#g3) = r4
	} :endloop0
	{
		jump .LBB0_9
	}
	.p2align	4
.LBB0_4:                                // %b5
                                        // =>This Inner Loop Header: Depth=1
	{
		jump .LBB0_4
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
