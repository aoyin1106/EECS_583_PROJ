SU(0):   %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Data Latency=0 Reg=%0
    SU(4): Anti Latency=1
SU(1):   %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=0 Reg=%1
    SU(6): Anti Latency=1
SU(2):   %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=1 Reg=%6
    SU(5): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(4): Anti Latency=0
SU(3):   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(2): Data Latency=1 Reg=%6
    SU(2): Ord  Latency=0 Memory
  Successors:
    SU(5): Ord  Latency=0 Memory
    SU(4): Ord  Latency=1 Memory
SU(4):   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)
  # preds left       : 4
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Ord  Latency=1 Memory
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=1
    SU(2): Anti Latency=0
  Successors:
    SU(5): Data Latency=1 Reg=%7
    SU(5): Ord  Latency=0 Memory
SU(5):   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%7
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
SU(6):   %2:intregs = nsw A2_addi %1:intregs, 1
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%1
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %2:intregs = nsw A2_addi %1:intregs, 1
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 3 MAX_II = 13 (rec=3, res=2)
SU(0):   %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1
SU(2):   %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)
SU(3):   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)
SU(4):   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)
SU(5):   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)
SU(1):   %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1
SU(6):   %2:intregs = nsw A2_addi %1:intregs, 1
	Node 0:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 2
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 2
	   ZLD  = 1
	   ZLH  = 1
	Node 4:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 1
	   ZLD  = 1
	   ZLH  = 1
	Node 5:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
	Node 6:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 2 depth 2 col 0
   SU(0) %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1
   SU(4) %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(1) %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1
   SU(6) %2:intregs = nsw A2_addi %1:intregs, 1

  Rec NodeSet Num nodes 4 rec 3 mov 0 depth 3 col 0
   SU(2) %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)
   SU(3) S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)
   SU(5) S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)
   SU(4) %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 3 col 0
   SU(4) %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)
   SU(5) S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

  NodeSet Num nodes 4 rec 3 mov 0 depth 3 col 0
   SU(2) %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)
   SU(3) S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)
   SU(5) S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)
   SU(4) %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

  NodeSet Num nodes 1 rec 1 mov 2 depth 2 col 0
   SU(0) %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1

  NodeSet Num nodes 2 rec 1 mov 3 depth 1 col 0
   SU(1) %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1
   SU(6) %2:intregs = nsw A2_addi %1:intregs, 1

NodeSet size 4
  Bottom up (default) 5 4 3 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Bottom up (preds) 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 6 1 
   Switching order to top down 
Done with Nodeset
Node order:  5  4  3  2  0  6  1 
Try to schedule with 3

Inst (5)   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 5 II: 3
	insert at cycle 3   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

Inst (4)   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

	es: 80000000 ls:        2 me: 7fffffff ms:        1
Trying to insert node between 2 and 1 II: 3
	insert at cycle 2   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

Inst (3)   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 1   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)

Inst (2)   %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)

	es: 80000000 ls:        0 me: 7fffffff ms:        1
	Can't schedule
Try to schedule with 4

Inst (5)   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 6 II: 4
	insert at cycle 3   S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

Inst (4)   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

	es: 80000000 ls:        2 me: 7fffffff ms:        0
Trying to insert node between 2 and 0 II: 4
	insert at cycle 2   %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

Inst (3)   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -2 II: 4
	insert at cycle 1   S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)

Inst (2)   %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)

	es: 80000000 ls:        0 me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 4
	insert at cycle 0   %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)

Inst (0)   %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1

	es: ffffffff ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and -1 II: 4
	insert at cycle 2   %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1

Inst (6)   %2:intregs = nsw A2_addi %1:intregs, 1

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 3 II: 4
	insert at cycle 0   %2:intregs = nsw A2_addi %1:intregs, 1

Inst (1)   %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1

	es: fffffffd ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -3 II: 4
	insert at cycle 0   %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1
Schedule Found? 1 (II=5)
cycle 0 (0) (1) %1:intregs = PHI %5:intregs, %bb.0, %2:intregs, %bb.1

cycle 0 (0) (2) %6:intregs = L2_loadri_io %0:intregs, 0 :: (load 4 from %ir.lsr.iv)

cycle 0 (0) (6) %2:intregs = nsw A2_addi %1:intregs, 1

cycle 1 (0) (3) S4_storeiri_io %6:intregs, 0, 0 :: (store 4 into %ir.v3)

cycle 2 (0) (0) %0:intregs = PHI %4:intregs, %bb.0, %3:intregs, %bb.1

cycle 2 (0) (4) %7:intregs, %3:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv)

cycle 3 (0) (5) S4_storeiri_io %7:intregs, 8, 0 :: (store 4 into %ir.v6)

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		loop0(.LBB0_1,#2)
		r1:0 = combine(r0,#0)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r0 = add(r0,#1)
		r2 = memw(r1+#0)
	}
	{
		memw(r2+#0) = #0
	}
	{
		r2 = memw(r1++#4)
	}
	{
		nop
		memw(r2+#8) = #0
	} :endloop0
// %bb.2:                               // %b2
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
