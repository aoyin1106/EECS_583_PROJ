SU(0):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 6
  Successors:
    SU(2): Data Latency=0 Reg=%1
    SU(2): Anti Latency=1
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%2
    SU(5): Anti Latency=1
SU(2):   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 5
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
  Successors:
    SU(4): Data Latency=4 Reg=%9
SU(3):   %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 5
  Successors:
    SU(4): Data Latency=4 Reg=%11
    SU(5): Anti Latency=0
SU(4):   %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 1
  Predecessors:
    SU(3): Data Latency=4 Reg=%11
    SU(2): Data Latency=4 Reg=%9
  Successors:
    SU(5): Data Latency=1 Reg=%12
SU(5):   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 6
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%12
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
    SU(3): Anti Latency=0
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)
ReservedCycles:0, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
SU(3):   %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)
SU(0):   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
SU(2):   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
SU(4):   %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs
SU(5):   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 6
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 5
	   MOV  = 5
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 5
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 1
	Node 4:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 5:
	   ASAP = 5
	   ALAP = 5
	   MOV  = 0
	   D    = 6
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
   SU(2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

  Rec NodeSet Num nodes 2 rec 1 mov 5 depth 6 col 0
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
   SU(5) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2
   SU(2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

  NodeSet Num nodes 3 rec 1 mov 5 depth 6 col 0
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2
   SU(5) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)
   SU(4) %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs

  NodeSet Num nodes 1 rec 0 mov 0 depth 0 col 0
   SU(3) %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)

NodeSet size 2
  Bottom up (default) 2 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Top down (succs) 4 5 1 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 1
  Bottom up (preds) 3 
   Switching order to top down 
Done with Nodeset
Node order:  2  0  4  5  1  3 
Try to schedule with 2

Inst (2)   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

Inst (0)   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

Inst (4)   %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	insert at cycle 5   %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs

Inst (5)   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)

	es:        6 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 6 and 7 II: 2
	insert at cycle 6   %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)

Inst (1)   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

	es:        5 ls:        6 me: 7fffffff ms: 80000000
Trying to insert node between 6 and 5 II: 2
	insert at cycle 5   %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

Inst (3)   %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 0 II: 2
	insert at cycle 1   %11:doubleregs = L2_loadrd_io %2:intregs, 0 :: (load (s64) from %ir.v13)
Schedule Found? 1 (II=2)
cycle -1 (3) (1) %2:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.2

cycle -1 (0) (0) %1:intregs = PHI %7:intregs, %bb.0, %4:intregs, %bb.2

cycle -1 (3) (4) %12:doubleregs = PS_vmulw_acc %11:doubleregs(tied-def 0), %9:doubleregs, %15:doubleregs

cycle -1 (1) (3) %11 = UNKNOWN %2, 16 :: (load (s64) from %ir.v13)

cycle 0 (3) (5) %5:intregs = S2_storerd_pi %2:intregs(tied-def 0), 8, %12:doubleregs :: (store (s64) into %ir.v13)

cycle 0 (0) (2) %9:doubleregs, %4:intregs = L2_loadrd_pi %1:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)

prolog:
bb.3.b2:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %16:doubleregs, %17:intregs = L2_loadrd_pi %7:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3)
prolog:
bb.4.b2:
; predecessors: %bb.3
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:doubleregs = L2_loadrd_io %8:intregs, 0 :: (load (s64) from %ir.v13)
  %19:doubleregs, %20:intregs = L2_loadrd_pi %17:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3 + 8)
prolog:
bb.5.b2:
; predecessors: %bb.4
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %21:doubleregs = L2_loadrd_io %8:intregs, 8 :: (load (s64) from %ir.v13 + 8)
  %22:doubleregs, %23:intregs = L2_loadrd_pi %20:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3 + 16)
New block
bb.6.b2:
; predecessors: %bb.5, %bb.6
  successors: %bb.6(0x7c000000), %bb.1(0x04000000); %bb.6(96.88%), %bb.1(3.12%)

  %29:intregs = PHI %23:intregs, %bb.5, %28:intregs, %bb.6
  %30:intregs = PHI %8:intregs, %bb.5, %26:intregs, %bb.6
  %31:doubleregs = PHI %22:doubleregs, %bb.5, %27:doubleregs, %bb.6
  %32:doubleregs = PHI %19:doubleregs, %bb.5, %31:doubleregs, %bb.6
  %33:doubleregs = PHI %16:doubleregs, %bb.5, %32:doubleregs, %bb.6
  %34:doubleregs = PHI %21:doubleregs, %bb.5, %25:doubleregs, %bb.6
  %35:doubleregs = PHI %18:doubleregs, %bb.5, %34:doubleregs, %bb.6
  %24:doubleregs = PS_vmulw_acc %35:doubleregs(tied-def 0), %33:doubleregs, %15:doubleregs
  %25:doubleregs = L2_loadrd_io %30:intregs, 16 :: (load unknown-size from %ir.v13, align 8)
  %26:intregs = S2_storerd_pi %30:intregs(tied-def 0), 8, %24:doubleregs :: (store (s64) into %ir.v13)
  %27:doubleregs, %28:intregs = L2_loadrd_pi %29:intregs(tied-def 1), 8 :: (load (s64) from %ir.v3 + 24)
  ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  J2_jump %bb.1, implicit-def dead $pc
epilog:
bb.7:
; predecessors: %bb.6
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %38:intregs = PHI %20:intregs, %bb.5, %29:intregs, %bb.6
  %39:intregs = PHI %8:intregs, %bb.5, %26:intregs, %bb.6
  %40:doubleregs = PHI %22:doubleregs, %bb.5, %27:doubleregs, %bb.6
  %41:doubleregs = PHI %19:doubleregs, %bb.5, %31:doubleregs, %bb.6
  %42:doubleregs = PHI %16:doubleregs, %bb.5, %32:doubleregs, %bb.6
  %43:doubleregs = PHI %21:doubleregs, %bb.5, %25:doubleregs, %bb.6
  %44:doubleregs = PHI %18:doubleregs, %bb.5, %34:doubleregs, %bb.6
  %36:doubleregs = PS_vmulw_acc %44:doubleregs(tied-def 0), %42:doubleregs, %15:doubleregs
  %37:intregs = S2_storerd_pi %39:intregs(tied-def 0), 8, %36:doubleregs :: (store unknown-size into %ir.v13, align 8)
epilog:
bb.8:
; predecessors: %bb.7
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %47:intregs = PHI %17:intregs, %bb.4, %38:intregs, %bb.7
  %48:intregs = PHI %8:intregs, %bb.4, %37:intregs, %bb.7
  %49:doubleregs = PHI %19:doubleregs, %bb.4, %40:doubleregs, %bb.7
  %50:doubleregs = PHI %16:doubleregs, %bb.4, %41:doubleregs, %bb.7
  %51:doubleregs = PHI %18:doubleregs, %bb.4, %43:doubleregs, %bb.7
  %45:doubleregs = PS_vmulw_acc %51:doubleregs(tied-def 0), %50:doubleregs, %15:doubleregs
  %46:intregs = S2_storerd_pi %48:intregs(tied-def 0), 8, %45:doubleregs :: (store unknown-size into %ir.v13, align 8)
epilog:
bb.9:
; predecessors: %bb.8
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %55:intregs = PHI %7:intregs, %bb.3, %47:intregs, %bb.8
  %56:intregs = PHI %8:intregs, %bb.3, %46:intregs, %bb.8
  %57:doubleregs = PHI %16:doubleregs, %bb.3, %49:doubleregs, %bb.8
  %52:doubleregs = L2_loadrd_io %56:intregs, 0 :: (load unknown-size from %ir.v13, align 8)
  %53:doubleregs = PS_vmulw_acc %52:doubleregs(tied-def 0), %57:doubleregs, %15:doubleregs
  %54:intregs = S2_storerd_pi %56:intregs(tied-def 0), 8, %53:doubleregs :: (store unknown-size into %ir.v13, align 8)
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r1 = ##g0
		r0 = ##g1
	}
	{
		loop0(.LBB0_1,#197)
		r3:2 = combine(#7,#7)
	}
	{
		r15:14 = memd(r1++#8)
		r9:8 = memd(r0+#0)
	}
	{
		r7:6 = memd(r0+#8)
	}
	{
		r5:4 = memd(r1++#8)
	}
	{
		r13:12 = memd(r1++#8)
	}
	.p2align	4
.LBB0_1:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r11:10 = combine(r9,r8)
		r9:8 = combine(r7,r6)
		r7:6 = memd(r0+#16)
	}
	{
		r11 += mpyi(r15,r3)
		r10 += mpyi(r14,r2)
		r15:14 = combine(r5,r4)
		r5:4 = combine(r13,r12)
	}
	{
		r13:12 = memd(r1++#8)
	}
	{
		nop
		memd(r0++#8) = r11:10
	} :endloop0
// %bb.2:
	{
		r9 += mpyi(r15,r3)
		r8 += mpyi(r14,r2)
	}
	{
		r7 += mpyi(r5,r3)
		r6 += mpyi(r4,r2)
	}
	{
		memd(r0++#8) = r9:8
	}
	{
		memd(r0++#8) = r7:6
	}
	{
		r7:6 = memd(r0+#0)
	}
	{
		r7 += mpyi(r13,r3)
		r6 += mpyi(r12,r2)
	}
	{
		jumpr r31
		memd(r0++#8) = r7:6
	}
.Ltmp0:                                 // Address of block that was removed by CodeGen
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.type	g0,@object                      // @g0
	.comm	g0,1600,8
	.type	g1,@object                      // @g1
	.comm	g1,1600,8
	.section	".note.GNU-stack","",@progbits
