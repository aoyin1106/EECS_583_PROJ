SU(0):   %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=0 Reg=%2
    SU(3): Anti Latency=1
SU(1):   %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%3
    SU(5): Anti Latency=1
SU(2):   %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Data Latency=0 Reg=%5
    SU(4): Anti Latency=1
SU(3):   %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%2
    SU(0): Anti Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=%18
SU(4):   %6:intregs = nsw A2_add %18:intregs, %5:intregs
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(3): Data Latency=1 Reg=%18
    SU(2): Data Latency=0 Reg=%5
    SU(2): Anti Latency=1
  Successors:
    SU(5): Data Latency=1 Reg=%6
SU(5):   %7:intregs = A2_max %6:intregs, %3:intregs
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%6
    SU(1): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs = A2_max %6:intregs, %3:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %6:intregs = nsw A2_add %18:intregs, %5:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(0):   %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2
SU(3):   %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)
SU(2):   %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2
SU(4):   %6:intregs = nsw A2_add %18:intregs, %5:intregs
SU(1):   %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
SU(5):   %7:intregs = A2_max %6:intregs, %3:intregs
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 2
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2
   SU(3) %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)

  Rec NodeSet Num nodes 2 rec 1 mov 2 depth 3 col 0
   SU(1) %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = A2_max %6:intregs, %3:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(2) %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2
   SU(4) %6:intregs = nsw A2_add %18:intregs, %5:intregs

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2
   SU(3) %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)

  NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(2) %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2
   SU(4) %6:intregs = nsw A2_add %18:intregs, %5:intregs

  NodeSet Num nodes 2 rec 1 mov 2 depth 3 col 0
   SU(1) %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
   SU(5) %7:intregs = A2_max %6:intregs, %3:intregs

NodeSet size 2
  Bottom up (default) 3 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Top down (succs) 4 2 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 2
  Top down (succs) 5 1 
   Switching order to bottom up 
Done with Nodeset
Node order:  3  0  4  2  5  1 
Try to schedule with 1

Inst (3)   %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)

Inst (0)   %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2

Inst (4)   %6:intregs = nsw A2_add %18:intregs, %5:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %6:intregs = nsw A2_add %18:intregs, %5:intregs

Inst (2)   %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2

	es:        1 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2

Inst (5)   %7:intregs = A2_max %6:intregs, %3:intregs

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %7:intregs = A2_max %6:intregs, %3:intregs

Inst (1)   %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2

	es:        2 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
Schedule Found? 1 (II=1)
cycle 0 (2) (1) %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2

cycle 0 (1) (2) %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2

cycle 0 (0) (0) %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2

cycle 0 (2) (5) %7:intregs = A2_max %6:intregs, %3:intregs

cycle 0 (1) (4) %6:intregs = nsw A2_add %18:intregs, %5:intregs

cycle 0 (0) (3) %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)

[stage 2 @0c] %3:intregs = PHI %17:intregs, %bb.1, %7:intregs, %bb.2
[stage 1 @0c] %5:intregs = PHI %17:intregs, %bb.1, %6:intregs, %bb.2
[stage 0 @0c] %2:intregs = PHI %1:intregs, %bb.1, %9:intregs, %bb.2
[stage 2 @0c] %7:intregs = A2_max %6:intregs, %3:intregs
[stage 1 @0c] %6:intregs = nsw A2_add %18:intregs, %5:intregs
[stage 0 @0c] %18:intregs, %9:intregs = L2_loadri_pi %2:intregs(tied-def 1), -4 :: (load (s32) from %ir.lsr.iv3)
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	test                            // -- Begin function test
	.p2align	4
	.type	test,@function
test:                                   // @test
	.cfi_startproc
// %bb.0:                               // %entry
	{
		r2 = r0
		r0 = add(r1,r0)
	}
	{
		r0 += lsr(r0,#31)
	}
	{
		r1 = asr(r0,#1)
		r0 = #0
	}
	{
		p0 = cmp.gt(r2,r1)
		if (p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %for.body.preheader
	{
		r1 = add(##A,asl(r1,#2))
		r0 = sub(r1,r2)
	}
	{
		r2 = add(r0,#1)
		r0 = #0
		r3 = memw(r1++#-4)
	}
	{
		p0 = cmp.gtu(r2,#1); if (!p0.new) jump:t .LBB0_2
		r4 = add(r2,#-2)
	}
// %bb.3:                               // %for.body
	{
		loop0(.LBB0_4,r4)
		p0 = cmp.gtu(r2,#2)
		r2 = add(r3,r0)
		r3 = memw(r1++#-4)
	}
	{
		if (!p0) jump:nt .LBB0_5
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_4:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	{
		r0 = max(r2,r0)
		r2 = add(r3,r2)
		r3 = memw(r1++#-4)
	} :endloop0
.LBB0_5:                                // %for.body
	{
		r0 = max(r2,r0)
		jump .LBB0_6
	}
.LBB0_2:
	{
		r2 = #0
	}
.LBB0_6:                                // %for.body
	{
		r1 = add(r3,r2)
	}
	{
		r0 = max(r1,r0)
		jumpr r31
	}
.Lfunc_end0:
	.size	test, .Lfunc_end0-test
	.cfi_endproc
                                        // -- End function
	.type	A,@object                       // @A
	.data
	.globl	A
	.p2align	3
A:
	.word	4                               // 0x4
	.word	4294967293                      // 0xfffffffd
	.word	5                               // 0x5
	.word	4294967294                      // 0xfffffffe
	.word	4294967295                      // 0xffffffff
	.word	2                               // 0x2
	.word	6                               // 0x6
	.word	4294967294                      // 0xfffffffe
	.size	A, 32

	.section	".note.GNU-stack","",@progbits
