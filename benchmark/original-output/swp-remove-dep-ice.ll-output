Unable to analyzeLoop, can NOT pipeline Loop

!!! Can not pipeline loop.
SU(0):   %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%1
    SU(2): Data Latency=0 Reg=%1
    SU(1): Data Latency=0 Reg=%1
    SU(3): Anti Latency=1
SU(1):   %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(2): Data Latency=0 Reg=%6
    SU(2): Ord  Latency=1 Barrier
SU(2):   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
    SU(0): Data Latency=0 Reg=%1
    SU(1): Ord  Latency=1 Barrier
SU(3):   %4:intregs = A2_addi %1:intregs, -8
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:intregs = A2_addi %1:intregs, -8
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(0):   %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1
SU(1):   %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)
SU(2):   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)
SU(3):   %4:intregs = A2_addi %1:intregs, -8
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 1
	   ZLH  = 1
	Node 2:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
	Node 3:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1
   SU(3) %4:intregs = A2_addi %1:intregs, -8

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)
   SU(2) S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)
   SU(2) S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1
   SU(3) %4:intregs = A2_addi %1:intregs, -8

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 0 3 
   Switching order to top down 
Done with Nodeset
Node order:  2  1  0  3 
Try to schedule with 1

Inst (2)   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

Inst (1)   %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)

	es: 80000000 ls:        0 me: 7fffffff ms:        1
	Can't schedule
Try to schedule with 2

Inst (2)   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

Inst (1)   %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)

	es: 80000000 ls:        0 me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 2
	insert at cycle 0   %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)

Inst (0)   %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1

Inst (3)   %4:intregs = A2_addi %1:intregs, -8

	es:        0 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %4:intregs = A2_addi %1:intregs, -8
Schedule Found? 1 (II=3)
cycle 0 (0) (0) %1:intregs = PHI %0:intregs, %bb.0, %4:intregs, %bb.1

cycle 0 (0) (1) %6:intregs = L2_loadruh_io %1:intregs, -2 :: (load 2 from %ir.cgep5, !tbaa !0)

cycle 0 (0) (3) %4:intregs = A2_addi %1:intregs, -8

cycle 1 (0) (2) S2_storerh_io %1:intregs, 0, %6:intregs :: (store 2 into %ir.lsr.iv3, !tbaa !0)

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r1 = lsr(r0,#2)
		r29 = add(r29,#-24)
	}
	{
		r0 = add(r29,#0)
	}
	{
		loop0(.LBB0_1,r1)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r0 = add(r0,#-8)
		r1 = memuh(r0+#-2)
		memh(r0+#0) = r1.new
	} :endloop0
	.p2align	4
.LBB0_2:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		jump .LBB0_2
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
