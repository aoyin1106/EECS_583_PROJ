SU(0):   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%1
    SU(5): Anti Latency=1
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(3): Data Latency=0 Reg=%2
    SU(3): Anti Latency=1
SU(2):   %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(4): Data Latency=0 Reg=%3
    SU(4): Anti Latency=1
SU(3):   %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(1): Anti Latency=1
  Successors:
    SU(5): Data Latency=1 Reg=%13
SU(4):   %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
    SU(2): Anti Latency=1
  Successors:
    SU(5): Data Latency=1 Reg=%14
SU(5):   %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Data Latency=1 Reg=%14
    SU(3): Data Latency=1 Reg=%13
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(2):   %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1
SU(4):   %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)
SU(1):   %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1
SU(3):   %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)
SU(0):   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
SU(5):   %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
   SU(5) %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1
   SU(3) %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(2) %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1
   SU(4) %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(1) %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1
   SU(3) %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 1
   SU(2) %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1
   SU(4) %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)

  NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
   SU(5) %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs

NodeSet size 2
  Bottom up (default) 3 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 4 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Top down (succs) 5 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  3  1  4  2  5  0 
Try to schedule with 1

Inst (3)   %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)

Inst (1)   %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1

Inst (4)   %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)

Inst (2)   %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1

Inst (5)   %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs

Inst (0)   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1

	es:        1 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
Schedule Found? 1 (II=2)
cycle 0 (1) (0) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1

cycle 0 (0) (1) %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1

cycle 0 (0) (2) %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1

cycle 0 (1) (5) %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs

cycle 0 (0) (3) %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)

cycle 0 (0) (4) %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)

[stage 1 @0c] %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
[stage 0 @0c] %2:intregs = PHI %8:intregs, %bb.0, %6:intregs, %bb.1
[stage 0 @0c] %3:intregs = PHI %9:intregs, %bb.0, %7:intregs, %bb.1
[stage 1 @0c] %4:intregs = nsw M2_maci %1:intregs(tied-def 0), %14:intregs, %13:intregs
[stage 0 @0c] %13:intregs, %6:intregs = L2_loadri_pi %2:intregs(tied-def 1), 4 :: (load 4 from %ir.v1)
[stage 0 @0c] %14:intregs, %7:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.v2)
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
	.cfi_startproc
// %bb.0:                               // %b0
	{
		r3:2 = combine(##10000,r0)
		r0 = #0
		r4 = memw(r1++#4)
	}
	{
		r5 = add(r3,#-1)
		p0 = cmp.gtu(r3,#1)
		r3 = memw(r2++#4)
	}
	{
		loop0(.LBB0_1,r5)
		if (!p0) jump:nt .LBB0_2
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r0 += mpyi(r4,r3)
		r3 = memw(r2++#4)
		r4 = memw(r1++#4)
	} :endloop0
.LBB0_2:                                // %b1
	{
		r0 += mpyi(r4,r3)
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
	.cfi_endproc
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
