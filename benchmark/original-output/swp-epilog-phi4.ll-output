SU(0):   %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Successors:
    SU(3): Data Latency=0 Reg=%3
    SU(3): Anti Latency=1
SU(1):   %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(7): Data Latency=0 Reg=%4
    SU(6): Data Latency=0 Reg=%4
    SU(7): Anti Latency=1
SU(2):   %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=1 Reg=%14
    SU(6): Ord  Latency=0 Memory
SU(3):   %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 2
  Predecessors:
    SU(0): Data Latency=0 Reg=%3
    SU(0): Anti Latency=1
  Successors:
    SU(5): Data Latency=2 Reg=%15
    SU(6): Ord  Latency=0 Memory
SU(4):   %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 2
  Successors:
    SU(5): Data Latency=2 Reg=%16
    SU(6): Ord  Latency=0 Memory
SU(5):   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(4): Data Latency=2 Reg=%16
    SU(3): Data Latency=2 Reg=%15
    SU(2): Data Latency=1 Reg=%14
  Successors:
    SU(6): Data Latency=0 Reg=%17
SU(6):   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(5): Data Latency=0 Reg=%17
    SU(4): Ord  Latency=0 Memory
    SU(3): Ord  Latency=0 Memory
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=0 Reg=%4
SU(7):   %7:intregs = A2_addi %4:intregs, 4000
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%4
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %7:intregs = A2_addi %4:intregs, 4000
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=2, res=2)
SU(4):   %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)
SU(0):   %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1
SU(3):   %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)
SU(2):   %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)
SU(5):   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
SU(1):   %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1
SU(6):   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)
SU(7):   %7:intregs = A2_addi %4:intregs, 4000
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 2
	   ZLD  = 1
	   ZLH  = 1
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 5:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 6:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
	Node 7:
	   ASAP = 0
	   ALAP = 2
	   MOV  = 2
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1
   SU(3) %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)

  Rec NodeSet Num nodes 2 rec 1 mov 2 depth 1 col 0
   SU(1) %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1
   SU(7) %7:intregs = A2_addi %4:intregs, 4000

  Rec NodeSet Num nodes 3 rec 1 mov 1 depth 3 col 0
   SU(2) %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)
   SU(5) %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
   SU(6) S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

  Rec NodeSet Num nodes 3 rec 2 mov 0 depth 3 col 0
   SU(3) %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)
   SU(5) %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
   SU(6) S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

  Rec NodeSet Num nodes 3 rec 2 mov 0 depth 3 col 0
   SU(4) %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)
   SU(5) %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
   SU(6) S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

  NodeSet Num nodes 3 rec 2 mov 0 depth 3 col 0
   SU(3) %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)
   SU(5) %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs
   SU(6) S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

  NodeSet Num nodes 1 rec 2 mov 0 depth 3 col 0
   SU(4) %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)

  NodeSet Num nodes 1 rec 1 mov 0 depth 1 col 0
   SU(0) %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1

  NodeSet Num nodes 1 rec 1 mov 1 depth 3 col 0
   SU(2) %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 2 depth 1 col 0
   SU(1) %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1
   SU(7) %7:intregs = A2_addi %4:intregs, 4000

NodeSet size 3
  Bottom up (default) 6 5 3 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Bottom up (default) 4 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Top down (succs) 0 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 1
  Bottom up (default) 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 1 7 
   Switching order to top down 
Done with Nodeset
Node order:  6  5  3  4  0  2  1  7 
Try to schedule with 2

Inst (6)   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

Inst (5)   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs

	es: 80000000 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 1 II: 2
	insert at cycle 2   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs

Inst (3)   %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)

	es: 80000000 ls:        0 me: 7fffffff ms:        1
	Can't schedule
Try to schedule with 3

Inst (6)   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 4 II: 3
	insert at cycle 2   S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

Inst (5)   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs

	es: 80000000 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 0 II: 3
	insert at cycle 2   %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs

Inst (3)   %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)

	es: 80000000 ls:        0 me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 3
	insert at cycle 0   %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)

Inst (4)   %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)

	es: 80000000 ls:        0 me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 3
	insert at cycle 0   %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)

Inst (0)   %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1

	es: fffffffe ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle 0   %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1

Inst (2)   %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)

	es: 80000000 ls:        1 me: 7fffffff ms:        0
Trying to insert node between 1 and 0 II: 3
	insert at cycle 1   %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)

Inst (1)   %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1

	es: 80000000 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 0 II: 3
	insert at cycle 2   %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1

Inst (7)   %7:intregs = A2_addi %4:intregs, 4000

	es:        2 ls:        4 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 4 II: 3
	insert at cycle 2   %7:intregs = A2_addi %4:intregs, 4000
Schedule Found? 1 (II=4)
cycle 0 (0) (0) %3:intregs = PHI %2:intregs, %bb.0, %8:intregs, %bb.1

cycle 0 (0) (3) %15:intregs, %8:intregs = L2_loadri_pi %3:intregs(tied-def 1), 4 :: (load 4 from %ir.lsr.iv6, !tbaa !0)

cycle 0 (0) (4) %16:intregs = L2_loadri_io %13:intregs, 0 :: (load 4 from %ir.a4, !tbaa !0)

cycle 1 (0) (2) %14:intregs = L2_loadri_io %12:intregs, 0 :: (load 4 from %ir.a3, !tbaa !0)

cycle 2 (0) (1) %4:intregs = PHI %1:intregs, %bb.0, %7:intregs, %bb.1

cycle 2 (0) (5) %17:intregs = nsw M2_maci %14:intregs(tied-def 0), %16:intregs, %15:intregs

cycle 2 (0) (6) S2_storeri_io %4:intregs, 0, %17:intregs :: (store 4 into %ir.lsr.iv24, !tbaa !0)

cycle 2 (0) (7) %7:intregs = A2_addi %4:intregs, 4000

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r0 = add(r2,#4000)
		r1 = add(r1,#4)
		r5 = add(r0,#-1)
	}
	{
		loop0(.LBB0_1,r5)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r2 = memw(r1++#4)
		r5 = memw(r4+#0)
	}
	{
		r6 = memw(r3+#0)
	}
	{
		r6 += mpyi(r5,r2)
		r0 = add(r0,#4000)
		memw(r0+#0) = r6.new
	} :endloop0
// %bb.2:                               // %b2
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
