SU(0):   %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%2
    SU(4): Anti Latency=1
SU(1):   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(2): Data Latency=0 Reg=%3
    SU(2): Anti Latency=1
SU(2):   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
  Successors:
    SU(3): Data Latency=2 Reg=%11
SU(3):   %12:doubleregs = S2_packhl %11:intregs, %13:intregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(2): Data Latency=2 Reg=%11
  Successors:
    SU(4): Data Latency=2 Reg=%12
SU(4):   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(3): Data Latency=2 Reg=%12
    SU(0): Data Latency=0 Reg=%2
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %12:doubleregs = S2_packhl %11:intregs, %13:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1
SU(2):   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)
SU(3):   %12:doubleregs = S2_packhl %11:intregs, %13:intregs
SU(0):   %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
SU(4):   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
	Node 0:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 4
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 2
	   ZLD  = 0
	   ZLH  = 0
	Node 4:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 4 depth 5 col 0
   SU(0) %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
   SU(4) %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1
   SU(2) %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1
   SU(2) %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

  NodeSet Num nodes 3 rec 1 mov 4 depth 5 col 0
   SU(0) %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
   SU(4) %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
   SU(3) %12:doubleregs = S2_packhl %11:intregs, %13:intregs

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Top down (succs) 3 4 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  2  1  3  4  0 
Try to schedule with 1

Inst (2)   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

Inst (1)   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1

Inst (3)   %12:doubleregs = S2_packhl %11:intregs, %13:intregs

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %12:doubleregs = S2_packhl %11:intregs, %13:intregs

Inst (4)   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 4 II: 1
	insert at cycle 4   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
	Can't schedule
Try to schedule with 2

Inst (2)   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

Inst (1)   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1

Inst (3)   %12:doubleregs = S2_packhl %11:intregs, %13:intregs

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   %12:doubleregs = S2_packhl %11:intregs, %13:intregs

Inst (4)   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	insert at cycle 4   %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf

Inst (0)   %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1

	es:        3 ls:        4 me: 7fffffff ms: 80000000
Trying to insert node between 4 and 3 II: 2
	insert at cycle 4   %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
Schedule Found? 1 (II=3)
cycle 0 (2) (0) %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1

cycle 0 (0) (1) %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1

cycle 0 (2) (4) %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf

cycle 0 (1) (3) %12:doubleregs = S2_packhl %11:intregs, %13:intregs

cycle 0 (0) (2) %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)

[stage 2 @0c] %2:doubleregs = PHI %9:doubleregs, %bb.0, %5:doubleregs, %bb.1
[stage 0 @0c] %3:intregs = PHI %10:intregs, %bb.0, %4:intregs, %bb.1
[stage 2 @0c] %5:doubleregs = M2_vdmacs_s0 %2:doubleregs(tied-def 0), %14:doubleregs, %12:doubleregs, implicit-def dead $usr_ovf
[stage 1 @0c] %12:doubleregs = S2_packhl %11:intregs, %13:intregs
[stage 0 @0c] %11:intregs, %4:intregs = L2_loadri_pi %3:intregs(tied-def 1), -16 :: (load 4 from %ir.v4, !tbaa !0)
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r3 = asr(r0,#1)
		r0 = memw(r6++#-16)
	}
	{
		r2 = add(r3,#-2)
	}
	{
		p0 = cmp.gtu(r3,#1); if (!p0.new) jump:t .LBB0_1
	}
// %bb.2:                               // %b1
	{
		loop0(.LBB0_3,r2)
		r5:4 = packhl(r0,r0)
		p0 = cmp.gtu(r3,#2)
		r0 = memw(r6++#-16)
	}
	{
		if (!p0) jump:nt .LBB0_4
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_3:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r3:2 += vdmpy(r1:0,r5:4):sat
		r5:4 = packhl(r0,r0)
		r0 = memw(r6++#-16)
	} :endloop0
.LBB0_4:                                // %b1
	{
		r3:2 += vdmpy(r1:0,r5:4):sat
		jump .LBB0_5
	}
.LBB0_1:
                                        // implicit-def: $d1
.LBB0_5:                                // %b1
	{
		r5:4 = packhl(r0,r0)
	}
	{
		r3:2 += vdmpy(r1:0,r5:4):sat
	}
	{
		memw(r1+#32) = r2
	}
	{
		r27:26 = memd(##3134984174)
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
