SU(0):   %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%1
    SU(3): Anti Latency=1
SU(1):   %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 3
  Successors:
    SU(2): Data Latency=2 Reg=%9
    SU(3): Anti Latency=0
SU(2):   %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 1
  Predecessors:
    SU(1): Data Latency=2 Reg=%9
  Successors:
    SU(3): Data Latency=1 Reg=%10
SU(3):   %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)
  # preds left       : 4
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%10
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
    SU(1): Anti Latency=0
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(0):   %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1
SU(1):   %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
SU(2):   %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
SU(3):   %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)
	Node 0:
	   ASAP = 0
	   ALAP = 3
	   MOV  = 3
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 3
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 2
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 3:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 3
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(0) %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1
   SU(3) %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)

  NodeSet Num nodes 2 rec 1 mov 3 depth 3 col 0
   SU(0) %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1
   SU(3) %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)

  NodeSet Num nodes 2 rec 0 mov 0 depth 0 col 0
   SU(1) %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
   SU(2) %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf

NodeSet size 2
  Bottom up (default) 3 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 2 1 
   Switching order to top down 
Done with Nodeset
Node order:  3  0  2  1 
Try to schedule with 1

Inst (3)   %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 3 II: 1
	insert at cycle 3   %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)

Inst (0)   %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1

	es:        3 ls:        3 me: 7fffffff ms: 80000000
Trying to insert node between 3 and 3 II: 1
	insert at cycle 3   %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1

Inst (2)   %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf

	es: 80000000 ls:        2 me: 7fffffff ms: 80000000
Trying to insert node between 2 and 2 II: 1
	insert at cycle 2   %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf

Inst (1)   %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %9:doubleregs = L2_loadrd_io %1:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
Schedule Found? 1 (II=2)
cycle 0 (3) (0) %1:intregs = PHI %4:intregs, %bb.3, %3:intregs, %bb.1

cycle 0 (3) (3) %3:intregs = S2_storerd_pi %1:intregs(tied-def 0), 8, %10:doubleregs :: (store 8 into %ir.arrayidx.phi)

cycle 0 (2) (2) %10:doubleregs = M2_mmpyul_rs1 %9:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf

cycle 0 (0) (1) %9 = UNKNOWN %3, 16 :: (load 8 from %ir.arrayidx.phi)

prolog:
bb.4.for.body:
; predecessors: %bb.3
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %14:doubleregs = L2_loadrd_io %4:intregs, 0 :: (load 8 from %ir.arrayidx.phi)
prolog:
bb.5.for.body:
; predecessors: %bb.4
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %15:doubleregs = L2_loadrd_io %4:intregs, 8 :: (load 8 from %ir.arrayidx.phi + 8)
prolog:
bb.6.for.body:
; predecessors: %bb.5
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %16:doubleregs = M2_mmpyul_rs1 %14:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
  %17:doubleregs = L2_loadrd_io %4:intregs, 16 :: (load 8 from %ir.arrayidx.phi + 16)
New block
bb.7.for.body:
; predecessors: %bb.6, %bb.7
  successors: %bb.2(0x04000000), %bb.7(0x7c000000); %bb.2(3.12%), %bb.7(96.88%)

  %21:intregs = PHI %4:intregs, %bb.6, %18:intregs, %bb.7
  %22:doubleregs = PHI %17:doubleregs, %bb.6, %20:doubleregs, %bb.7
  %23:doubleregs = PHI %15:doubleregs, %bb.6, %22:doubleregs, %bb.7
  %24:doubleregs = PHI %16:doubleregs, %bb.6, %19:doubleregs, %bb.7
  %18:intregs = S2_storerd_pi %21:intregs(tied-def 0), 8, %24:doubleregs :: (store 8 into %ir.arrayidx.phi)
  %19:doubleregs = M2_mmpyul_rs1 %23:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
  %20:doubleregs = L2_loadrd_io %18:intregs, 16 :: (load 8 from %ir.arrayidx.phi + 24)
  ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  J2_jump %bb.2, implicit-def dead $pc
epilog:
bb.8:
; predecessors: %bb.7
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %26:intregs = PHI %4:intregs, %bb.6, %18:intregs, %bb.7
  %27:doubleregs = PHI %17:doubleregs, %bb.6, %20:doubleregs, %bb.7
  %28:doubleregs = PHI %15:doubleregs, %bb.6, %22:doubleregs, %bb.7
  %29:doubleregs = PHI %16:doubleregs, %bb.6, %19:doubleregs, %bb.7
  %25:intregs = S2_storerd_pi %26:intregs(tied-def 0), 8, %29:doubleregs :: (store unknown-size into %ir.arrayidx.phi, align 8)
epilog:
bb.9:
; predecessors: %bb.8
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %32:intregs = PHI %4:intregs, %bb.5, %25:intregs, %bb.8
  %33:doubleregs = PHI %15:doubleregs, %bb.5, %27:doubleregs, %bb.8
  %34:doubleregs = PHI %14:doubleregs, %bb.5, %28:doubleregs, %bb.8
  %30:doubleregs = M2_mmpyul_rs1 %34:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
  %31:intregs = S2_storerd_pi %32:intregs(tied-def 0), 8, %30:doubleregs :: (store unknown-size into %ir.arrayidx.phi, align 8)
epilog:
bb.10:
; predecessors: %bb.9
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %37:intregs = PHI %4:intregs, %bb.4, %31:intregs, %bb.9
  %38:doubleregs = PHI %14:doubleregs, %bb.4, %33:doubleregs, %bb.9
  %35:doubleregs = M2_mmpyul_rs1 %38:doubleregs, %5:doubleregs, implicit-def dead $usr_ovf
  %36:intregs = S2_storerd_pi %37:intregs(tied-def 0), 8, %35:doubleregs :: (store unknown-size into %ir.arrayidx.phi, align 8)
	.text
	.file	"<stdin>"
	.globl	test                            // -- Begin function test
	.p2align	4
	.type	test,@function
test:                                   // @test
// %bb.0:                               // %entry
	{
		p0 = cmp.gt(r4,#0)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %for.body
	{
		p0 = cmp.gtu(r4,#1); if (!p0.new) jump:t .LBB0_7
		r9:8 = memd(r0+#0)
	}
// %bb.2:                               // %for.body
	{
		p0 = cmp.gtu(r4,#2); if (!p0.new) jump:t .LBB0_6
		r7:6 = memd(r0+#8)
	}
// %bb.3:                               // %for.body
	{
		r13:12 = vmpyweuh(r9:8,r3:2):<<1:rnd:sat
		r1 = add(r4,#-3)
		p0 = cmp.gtu(r4,#3)
		r5:4 = memd(r0+#16)
	}
	{
		loop0(.LBB0_4,r1)
		if (!p0) jump:nt .LBB0_5
	}
	.p2align	4
.LBB0_4:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	{
		r13:12 = vmpyweuh(r7:6,r3:2):<<1:rnd:sat
		r7:6 = combine(r5,r4)
		r5:4 = memd(r0+#24)
		memd(r0++#8) = r13:12
	} :endloop0
.LBB0_5:
	{
		r9:8 = combine(r7,r6)
		r7:6 = combine(r5,r4)
		memd(r0++#8) = r13:12
	}
.LBB0_6:
	{
		r5:4 = vmpyweuh(r9:8,r3:2):<<1:rnd:sat
		r9:8 = combine(r7,r6)
	}
	{
		memd(r0++#8) = r5:4
	}
.LBB0_7:
	{
		r3:2 = vmpyweuh(r9:8,r3:2):<<1:rnd:sat
	}
	{
		jumpr r31
		memd(r0++#8) = r3:2
	}
.Ltmp0:                                 // Address of block that was removed by CodeGen
.Lfunc_end0:
	.size	test, .Lfunc_end0-test
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
