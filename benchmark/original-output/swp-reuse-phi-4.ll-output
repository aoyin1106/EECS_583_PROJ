SU(0):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(2): Anti Latency=1
SU(1):   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(2): Data Latency=0 Reg=%3
SU(2):   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%3
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Return Res MII:1
MII = 1 MAX_II = 11 (rec=0, res=1)
SU(1):   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1
SU(0):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1
SU(2):   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  NodeSet Num nodes 3 rec 0 mov 0 depth 0 col 0
   SU(0) %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1
   SU(2) %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi
   SU(1) %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1

NodeSet size 3
  Bottom up (all) 2 1 0 
   Switching order to top down 
Done with Nodeset
Node order:  2  1  0 
Try to schedule with 1

Inst (2)   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi

Inst (1)   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1

Inst (0)   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1

	es:        0 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1
Schedule Found? 1 (II=2)
cycle 0 (0) (1) %3:intregs = PHI %11:intregs, %bb.0, %20:intregs, %bb.1

cycle 0 (0) (0) %2:doubleregs = PHI %10:doubleregs, %bb.0, %19:doubleregs, %bb.1

cycle 0 (0) (2) %19:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %20:intregs, %subreg.isub_hi

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		if (p0) jumpr:nt r31
	}
.LBB0_1:                                // %b1
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.globl	f1                              // -- Begin function f1
	.p2align	4
	.type	f1,@function
f1:                                     // @f1
// %bb.0:                               // %b0
	{
		r0 = asr(r0,#1)
	}
	{
		loop0(.LBB1_1,r0)
		r2 = zxth(r0)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB1_1:                                // %b2
                                        // =>This Inner Loop Header: Depth=1
	{
		r5:4 = combine(r3,r2)
		r3 = r2
	} :endloop0
// %bb.2:                               // %b3
	{
		r3:2 += vdmpy(r5:4,r1:0):sat
	}
	{
		memw(r1+#0) = r2
	}
	{
		r27:26 = memd(##3134984174)
	}
.Lfunc_end1:
	.size	f1, .Lfunc_end1-f1
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
