SU(0):   %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%4
    SU(3): Anti Latency=1
SU(1):   %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%5
    SU(2): Anti Latency=1
SU(2):   %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%5
    SU(1): Anti Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=%24
SU(3):   %6:intregs = nsw A2_add %24:intregs, %4:intregs
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%24
    SU(0): Data Latency=0 Reg=%4
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %6:intregs = nsw A2_add %24:intregs, %4:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2
SU(2):   %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)
SU(0):   %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
SU(3):   %6:intregs = nsw A2_add %24:intregs, %4:intregs
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
   SU(3) %6:intregs = nsw A2_add %24:intregs, %4:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2
   SU(2) %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2
   SU(2) %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)

  NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
   SU(3) %6:intregs = nsw A2_add %24:intregs, %4:intregs

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Top down (succs) 3 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  2  1  3  0 
Try to schedule with 1

Inst (2)   %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)

Inst (1)   %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2

Inst (3)   %6:intregs = nsw A2_add %24:intregs, %4:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %6:intregs = nsw A2_add %24:intregs, %4:intregs

Inst (0)   %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2

	es:        1 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
Schedule Found? 1 (II=2)
cycle 0 (1) (0) %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2

cycle 0 (0) (1) %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2

cycle 0 (1) (3) %6:intregs = nsw A2_add %24:intregs, %4:intregs

cycle 0 (0) (2) %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)

[stage 1 @0c] %4:intregs = PHI %1:intregs, %bb.1, %6:intregs, %bb.2
[stage 0 @0c] %5:intregs = PHI %18:intregs, %bb.1, %8:intregs, %bb.2
[stage 1 @0c] %6:intregs = nsw A2_add %24:intregs, %4:intregs
[stage 0 @0c] %24:intregs, %8:intregs = L2_loadri_pi %5:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx.phi)
Dynamic: TC > 1
SU(0):   %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%10
    SU(3): Anti Latency=1
SU(1):   %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%11
    SU(2): Anti Latency=1
SU(2):   %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%11
    SU(1): Anti Latency=1
  Successors:
    SU(3): Data Latency=1 Reg=%27
SU(3):   %12:intregs = nsw A2_add %27:intregs, %10:intregs
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(2): Data Latency=1 Reg=%27
    SU(0): Data Latency=0 Reg=%10
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.4, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %12:intregs = nsw A2_add %27:intregs, %10:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4
SU(2):   %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)
SU(0):   %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
SU(3):   %12:intregs = nsw A2_add %27:intregs, %10:intregs
	Node 0:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 3:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
   SU(3) %12:intregs = nsw A2_add %27:intregs, %10:intregs

  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4
   SU(2) %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(1) %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4
   SU(2) %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)

  NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(0) %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
   SU(3) %12:intregs = nsw A2_add %27:intregs, %10:intregs

NodeSet size 2
  Bottom up (default) 2 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Top down (succs) 3 0 
   Switching order to bottom up 
Done with Nodeset
Node order:  2  1  3  0 
Try to schedule with 1

Inst (2)   %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)

Inst (1)   %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4

Inst (3)   %12:intregs = nsw A2_add %27:intregs, %10:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %12:intregs = nsw A2_add %27:intregs, %10:intregs

Inst (0)   %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4

	es:        1 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 1
	insert at cycle 1   %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
Schedule Found? 1 (II=2)
cycle 0 (1) (0) %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4

cycle 0 (0) (1) %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4

cycle 0 (1) (3) %12:intregs = nsw A2_add %27:intregs, %10:intregs

cycle 0 (0) (2) %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)

[stage 1 @0c] %10:intregs = PHI %0:intregs, %bb.3, %12:intregs, %bb.4
[stage 0 @0c] %11:intregs = PHI %18:intregs, %bb.3, %14:intregs, %bb.4
[stage 1 @0c] %12:intregs = nsw A2_add %27:intregs, %10:intregs
[stage 0 @0c] %27:intregs, %14:intregs = L2_loadri_pi %11:intregs(tied-def 1), 4 :: (load 4 from %ir.arrayidx7.phi)
Dynamic: TC > 1

!!! Can not pipeline loop.
	.text
	.file	"<stdin>"
	.globl	test                            // -- Begin function test
	.p2align	4
	.type	test,@function
test:                                   // @test
	.cfi_startproc
// %bb.0:                               // %entry
	{
		p0 = cmp.gt(r1,#0)
		memd(r29+#-16) = r17:16
		allocframe(#24)
	}                                       // 8-byte Folded Spill
	.cfi_def_cfa r30, 8
	.cfi_offset r31, -4
	.cfi_offset r30, -8
	.cfi_offset r17, -12
	.cfi_offset r16, -16
	.cfi_offset r19, -20
	.cfi_offset r18, -24
	.cfi_offset r21, -28
	.cfi_offset r20, -32
	{
		if (!p0) jump:nt .LBB0_1
		r18 = #0
		memd(r29+#8) = r19:18
		memd(r29+#0) = r21:20
	}                                       // 8-byte Folded Spill
// %bb.2:
	{
		r19 = #0 ; jump .LBB0_3
		r17:16 = combine(r0,r1)
		r20 = #0
	}
	.p2align	4
.LBB0_7:                                // %for.body6
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		r18 = add(r1,r18)
		r20 = add(r20,#1)
		if (cmp.eq(r20.new,r16)) jump:nt .LBB0_8
	}
.LBB0_3:                                // %for.body3.lr.ph
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_4 Depth 2
                                        //     Child Loop BB0_6 Depth 2
	{
		p0 = cmp.gtu(r16,#1)
		r0 = r17
		r1 = add(r16,#-1)
	}
	{
		loop0(.LBB0_4,r1)
		if (!p0) jump:nt .LBB0_5
		r1 = memw(r0++#4)
	}
	.p2align	4
.Ltmp1:                                 // Block address taken
.LBB0_4:                                // %for.body3
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	{
		r19 = add(r1,r19)
		r1 = memw(r0++#4)
	} :endloop0
.LBB0_5:                                // %for.body3
                                        //   in Loop: Header=BB0_3 Depth=1
	{
		call bar
		r0 = r17
		r19 = add(r1,r19)
	}
	{
		p0 = cmp.gtu(r16,#1)
		r0 = r17
		r1 = add(r16,#-1)
	}
	{
		loop0(.LBB0_6,r1)
		if (!p0) jump:nt .LBB0_7
		r1 = memw(r0++#4)
	}
	.p2align	4
.Ltmp2:                                 // Block address taken
.LBB0_6:                                // %for.body6
                                        //   Parent Loop BB0_3 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	{
		r18 = add(r1,r18)
		r1 = memw(r0++#4)
	} :endloop0
	{
		jump .LBB0_7
	}
.LBB0_1:
	{
		r19 = #0
	}
.LBB0_8:                                // %for.end14
	{
		r0 = add(r18,r19)
		r17:16 = memd(r29+#16)
		r19:18 = memd(r29+#8)
	}                                       // 8-byte Folded Reload
	{
		r21:20 = memd(r29+#0)
		dealloc_return
	}                                       // 8-byte Folded Reload
.Lfunc_end0:
	.size	test, .Lfunc_end0-test
	.cfi_endproc
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
