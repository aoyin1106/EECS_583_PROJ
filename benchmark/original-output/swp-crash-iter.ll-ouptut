SU(0):   %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 5
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(8): Data Latency=0 Reg=%1
    SU(7): Data Latency=0 Reg=%1
    SU(6): Data Latency=0 Reg=%1
    SU(4): Data Latency=0 Reg=%1
    SU(8): Anti Latency=1
SU(1):   %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=0 Reg=%2
    SU(7): Anti Latency=1
SU(2):   %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%3
    SU(6): Anti Latency=1
SU(3):   %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
  Successors:
    SU(6): Data Latency=1 Reg=%10
SU(4):   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(0): Data Latency=0 Reg=%1
  Successors:
    SU(5): Data Latency=0 Reg=%25
SU(5):   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf
  # preds left       : 1
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Predecessors:
    SU(4): Data Latency=0 Reg=%25
  Successors:
    SU(8): Data Latency=1 Reg=%14
    SU(7): Data Latency=1 Reg=%14
SU(6):   %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%10
    SU(0): Data Latency=0 Reg=%1
    SU(2): Anti Latency=1
SU(7):   %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%14
    SU(0): Data Latency=0 Reg=%1
    SU(1): Anti Latency=1
SU(8):   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(5): Data Latency=1 Reg=%14
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 2 MAX_II = 12 (rec=2, res=1)
SU(2):   %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1
SU(3):   %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
SU(0):   %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1
SU(6):   %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi
SU(1):   %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1
SU(4):   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
SU(5):   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf
SU(7):   %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi
SU(8):   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 2
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 1
	   ZLH  = 1
	Node 5:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 2
	   ZLH  = 0
	Node 6:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 7:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 8:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 4 rec 2 mov 0 depth 1 col 0
   SU(0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1
   SU(8) %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi
   SU(4) %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
   SU(5) %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

  Rec NodeSet Num nodes 4 rec 2 mov 0 depth 1 col 0
   SU(1) %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1
   SU(4) %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
   SU(5) %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf
   SU(7) %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi

  Rec NodeSet Num nodes 3 rec 2 mov 0 depth 1 col 0
   SU(2) %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1
   SU(3) %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
   SU(6) %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi

  NodeSet Num nodes 4 rec 2 mov 0 depth 1 col 0
   SU(0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1
   SU(8) %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi
   SU(4) %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
   SU(5) %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

  NodeSet Num nodes 2 rec 2 mov 0 depth 1 col 0
   SU(1) %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1
   SU(7) %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi

  NodeSet Num nodes 3 rec 2 mov 0 depth 1 col 0
   SU(2) %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1
   SU(3) %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
   SU(6) %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi

NodeSet size 4
  Bottom up (default) 8 5 4 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 1 7 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Top down (succs) 6 2 3 
   Switching order to bottom up 
Done with Nodeset
Node order:  8  5  4  0  1  7  6  2  3 
Try to schedule with 2

Inst (8)   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi

Inst (5)   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

Inst (4)   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle -1   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi

Inst (0)   %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1

	es:        0 ls: ffffffff me: 7fffffff ms: 80000000
	Can't schedule
Try to schedule with 3

Inst (8)   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 3 II: 3
	insert at cycle 1   %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi

Inst (5)   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle 0   %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

Inst (4)   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -2 II: 3
	insert at cycle -1   %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi

Inst (0)   %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1

	es: ffffffff ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -1 II: 3
	insert at cycle -1   %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1

Inst (1)   %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -1   %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1

Inst (7)   %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi

	es:        1 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 1 II: 3
	insert at cycle 1   %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi

Inst (6)   %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 1 II: 3
	insert at cycle -1   %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi

Inst (2)   %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1

	es: fffffffd ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -3 and -1 II: 3
	insert at cycle -2   %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1

Inst (3)   %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf

	es: fffffffe ls: fffffffe me: 7fffffff ms: 80000000
Trying to insert node between -2 and -2 II: 3
	insert at cycle -2   %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
Schedule Found? 1 (II=3)
cycle -2 (0) (2) %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1

cycle -2 (1) (8) %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi

cycle -2 (1) (7) %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi

cycle -2 (0) (3) %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf

cycle -1 (0) (0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1

cycle -1 (0) (1) %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1

cycle -1 (0) (4) %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi

cycle -1 (0) (6) %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi

cycle 0 (0) (5) %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf

[stage 0 @-2c] %3:doubleregs = PHI %9:doubleregs, %bb.0, %26:doubleregs, %bb.1
[stage 1 @-2c] %28:doubleregs = REG_SEQUENCE %14.isub_lo:doubleregs, %subreg.isub_lo, %1.isub_hi:doubleregs, %subreg.isub_hi
[stage 1 @-2c] %27:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %14.isub_hi:doubleregs, %subreg.isub_hi
[stage 0 @-2c] %10:doubleregs = M2_cmacsc_s0 %3:doubleregs(tied-def 0), %11:intregs, %12:intregs, implicit-def dead $usr_ovf
[stage 0 @-1c] %1:doubleregs = PHI %9:doubleregs, %bb.0, %28:doubleregs, %bb.1
[stage 0 @-1c] %2:doubleregs = PHI %9:doubleregs, %bb.0, %27:doubleregs, %bb.1
[stage 0 @-1c] %25:doubleregs = REG_SEQUENCE %1.isub_lo:doubleregs, %subreg.isub_lo, %2.isub_hi:doubleregs, %subreg.isub_hi
[stage 0 @-1c] %26:doubleregs = REG_SEQUENCE %1.isub_hi:doubleregs, %subreg.isub_lo, %10.isub_hi:doubleregs, %subreg.isub_hi
[stage 0 @0c] %14:doubleregs = M2_cmacsc_s0 %25:doubleregs(tied-def 0), %15:intregs, %16:intregs, implicit-def dead $usr_ovf
Static-true: TC > 1
	.text
	.file	"<stdin>"
	.globl	foo                             // -- Begin function foo
	.p2align	4
	.type	foo,@function
foo:                                    // @foo
	.cfi_startproc
// %bb.0:                               // %entry
	{
		r3:2 = combine(#0,#0)
		r1:0 = combine(#0,#0)
		r5:4 = combine(#0,#0)
	}
	{
		r3:2 += cmpy(r0,r0*):sat
		r5:4 += cmpy(r0,r0*):sat
	}
	{
		loop0(.LBB0_1,#62)
		r2 = r1
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	{
		r3:2 += cmpy(r0,r0*):sat
		r5:4 += cmpy(r0,r0*):sat
	}
	{
		r2 = r1
		nop
	} :endloop0
// %bb.2:                               // %for.end
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	foo, .Lfunc_end0-foo
	.cfi_endproc
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
