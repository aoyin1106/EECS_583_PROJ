SU(0):   %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%1
    SU(3): Anti Latency=1
SU(1):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(3): Data Latency=0 Reg=%2
    SU(4): Anti Latency=1
SU(2):   %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1
  # preds left       : 0
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Successors:
    SU(4): Data Latency=0 Reg=%3
SU(3):   %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%2
    SU(0): Data Latency=0 Reg=%1
    SU(0): Anti Latency=1
SU(4):   %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(2): Data Latency=0 Reg=%3
    SU(1): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 1 MAX_II = 11 (rec=1, res=1)
SU(1):   %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1
SU(0):   %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1
SU(3):   %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf
SU(2):   %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1
SU(4):   %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1
   SU(3) %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1
   SU(3) %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf

  NodeSet Num nodes 3 rec 0 mov 0 depth 0 col 0
   SU(1) %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1
   SU(4) %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi
   SU(2) %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1

NodeSet size 2
  Bottom up (default) 3 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 3
  Bottom up (preds) 1 4 2 
   Switching order to top down 
Done with Nodeset
Node order:  3  0  1  4  2 
Try to schedule with 1

Inst (3)   %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf

Inst (0)   %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1

	es:        0 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1

Inst (1)   %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1

Inst (4)   %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi

Inst (2)   %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1

	es: 80000000 ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and 0 II: 1
	insert at cycle 0   %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1
Schedule Found? 1 (II=2)
cycle 0 (0) (0) %1:doubleregs = PHI %9:doubleregs, %bb.0, %4:doubleregs, %bb.1

cycle 0 (0) (1) %2:doubleregs = PHI %10:doubleregs, %bb.0, %16:doubleregs, %bb.1

cycle 0 (0) (2) %3:intregs = PHI %8:intregs, %bb.0, %5:intregs, %bb.1

cycle 0 (0) (3) %4:doubleregs = M2_vdmacs_s0 %1:doubleregs(tied-def 0), %2:doubleregs, %11:doubleregs, implicit-def dead $usr_ovf

cycle 0 (0) (4) %16:doubleregs = REG_SEQUENCE %3:intregs, %subreg.isub_lo, %5:intregs, %subreg.isub_hi

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	f0                              // -- Begin function f0
	.p2align	4
	.type	f0,@function
f0:                                     // @f0
// %bb.0:                               // %b0
	{
		r1:0 = combine(#0,#0)
	}
	{
		loop0(.LBB0_1,r0)
		r2 = combine(r0.l,r0.l)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %b1
                                        // =>This Inner Loop Header: Depth=1
	{
		r1:0 += vdmpy(r3:2,r1:0):sat
		r3 = r2
	} :endloop0
// %bb.2:                               // %b2
	{
		r27:26 = memd(##3134984174)
	}
.Lfunc_end0:
	.size	f0, .Lfunc_end0-f0
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
