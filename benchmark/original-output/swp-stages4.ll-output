SU(0):   %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(8): Data Latency=0 Reg=%8
    SU(8): Anti Latency=1
SU(1):   %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(10): Data Latency=0 Reg=%9
    SU(10): Anti Latency=1
SU(2):   %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(14): Data Latency=0 Reg=%11
    SU(14): Anti Latency=1
SU(3):   %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 5
  Successors:
    SU(7): Data Latency=0 Reg=%12
    SU(4): Data Latency=0 Reg=%12
    SU(8): Anti Latency=1
SU(4):   %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(3): Data Latency=0 Reg=%12
  Successors:
    SU(7): Data Latency=0 Reg=%13
SU(5):   %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1
  # preds left       : 0
  # succs left       : 3
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 4
  Successors:
    SU(11): Data Latency=0 Reg=%14
    SU(6): Data Latency=0 Reg=%14
    SU(10): Anti Latency=1
SU(6):   %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 3
  Predecessors:
    SU(5): Data Latency=0 Reg=%14
  Successors:
    SU(9): Data Latency=0 Reg=%15
SU(7):   %31:intregs = nsw A2_add %12:intregs, %13:intregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 4
  Predecessors:
    SU(4): Data Latency=0 Reg=%13
    SU(3): Data Latency=0 Reg=%12
  Successors:
    SU(9): Data Latency=1 Reg=%31
SU(8):   %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 4
  Predecessors:
    SU(0): Data Latency=0 Reg=%8
    SU(3): Anti Latency=1
    SU(0): Anti Latency=1
  Successors:
    SU(9): Data Latency=1 Reg=%16
SU(9):   %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 3
  Predecessors:
    SU(8): Data Latency=1 Reg=%16
    SU(7): Data Latency=1 Reg=%31
    SU(6): Data Latency=0 Reg=%15
  Successors:
    SU(11): Data Latency=1 Reg=%33
SU(10):   %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 3
  Predecessors:
    SU(1): Data Latency=0 Reg=%9
    SU(5): Anti Latency=1
    SU(1): Anti Latency=1
  Successors:
    SU(11): Data Latency=1 Reg=%17
SU(11):   %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs
  # preds left       : 3
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 3
  Height             : 2
  Predecessors:
    SU(10): Data Latency=1 Reg=%17
    SU(9): Data Latency=1 Reg=%33
    SU(5): Data Latency=0 Reg=%14
  Successors:
    SU(12): Data Latency=1 Reg=%35
SU(12):   %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 4
  Height             : 1
  Predecessors:
    SU(11): Data Latency=1 Reg=%35
  Successors:
    SU(13): Data Latency=1 Reg=%37
SU(13):   %38:intregs = S2_lsr_i_r %37:intregs, 16
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(12): Data Latency=1 Reg=%37
  Successors:
    SU(14): Data Latency=0 Reg=%38
SU(14):   %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 5
  Height             : 0
  Predecessors:
    SU(13): Data Latency=0 Reg=%38
    SU(2): Data Latency=0 Reg=%11
    SU(2): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %38:intregs = S2_lsr_i_r %37:intregs, 16
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %31:intregs = nsw A2_add %12:intregs, %13:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(5):   %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1
SU(1):   %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1
SU(10):   %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)
SU(3):   %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1
SU(0):   %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1
SU(8):   %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)
SU(4):   %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1
SU(7):   %31:intregs = nsw A2_add %12:intregs, %13:intregs
SU(6):   %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1
SU(9):   %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs
SU(11):   %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs
SU(12):   %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs
SU(13):   %38:intregs = S2_lsr_i_r %37:intregs, 16
SU(2):   %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
SU(14):   %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 4
	   MOV  = 4
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 5
	   ZLD  = 0
	   ZLH  = 2
	Node 4:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 4
	   ZLD  = 1
	   ZLH  = 1
	Node 5:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 4
	   ZLD  = 0
	   ZLH  = 2
	Node 6:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 3
	   ZLD  = 1
	   ZLH  = 1
	Node 7:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 4
	   ZLD  = 2
	   ZLH  = 0
	Node 8:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 4
	   ZLD  = 1
	   ZLH  = 0
	Node 9:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 3
	   ZLD  = 2
	   ZLH  = 0
	Node 10:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 3
	   ZLD  = 1
	   ZLH  = 0
	Node 11:
	   ASAP = 2
	   ALAP = 2
	   MOV  = 0
	   D    = 3
	   H    = 2
	   ZLD  = 1
	   ZLH  = 0
	Node 12:
	   ASAP = 3
	   ALAP = 3
	   MOV  = 0
	   D    = 4
	   H    = 1
	   ZLD  = 0
	   ZLH  = 0
	Node 13:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 14:
	   ASAP = 4
	   ALAP = 4
	   MOV  = 0
	   D    = 5
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1
   SU(8) %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(1) %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1
   SU(10) %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)

  Rec NodeSet Num nodes 2 rec 1 mov 4 depth 5 col 0
   SU(2) %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
   SU(14) %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1
   SU(8) %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(1) %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1
   SU(10) %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)

  NodeSet Num nodes 11 rec 1 mov 4 depth 5 col 0
   SU(2) %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
   SU(14) %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
   SU(13) %38:intregs = S2_lsr_i_r %37:intregs, 16
   SU(12) %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs
   SU(11) %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs
   SU(9) %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs
   SU(7) %31:intregs = nsw A2_add %12:intregs, %13:intregs
   SU(4) %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1
   SU(3) %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1
   SU(6) %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1
   SU(5) %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1

NodeSet size 2
  Bottom up (default) 8 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 10 1 
   Switching order to top down 
Done with Nodeset
NodeSet size 11
  Top down (succs) 3 5 4 7 6 9 11 12 13 14 2 
   Switching order to bottom up 
Done with Nodeset
Node order:  8  0  10  1  3  5  4  7  6  9  11  12  13  14  2 
Try to schedule with 2

Inst (8)   %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)

Inst (0)   %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1

Inst (10)   %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)

Inst (1)   %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1

Inst (3)   %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1

Inst (5)   %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1

Inst (4)   %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1

Inst (7)   %31:intregs = nsw A2_add %12:intregs, %13:intregs

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %31:intregs = nsw A2_add %12:intregs, %13:intregs

Inst (6)   %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1

	es: ffffffff ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and 0 II: 2
	insert at cycle -1   %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1

Inst (9)   %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs

	es:        1 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs

Inst (11)   %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs

	es:        2 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 2 and 3 II: 2
	insert at cycle 2   %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs

Inst (12)   %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs

	es:        3 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 3 and 4 II: 2
	insert at cycle 3   %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs

Inst (13)   %38:intregs = S2_lsr_i_r %37:intregs, 16

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	insert at cycle 4   %38:intregs = S2_lsr_i_r %37:intregs, 16

Inst (14)   %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)

	es:        4 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 4 and 5 II: 2
	failed to insert at cycle 4   %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
	insert at cycle 5   %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)

Inst (2)   %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1

	es:        4 ls:        5 me: 7fffffff ms: 80000000
Trying to insert node between 5 and 4 II: 2
	insert at cycle 5   %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
Schedule Found? 1 (II=3)
cycle -1 (3) (2) %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1

cycle -1 (0) (3) %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1

cycle -1 (0) (5) %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1

cycle -1 (0) (4) %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1

cycle -1 (0) (6) %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1

cycle -1 (3) (14) %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)

cycle -1 (2) (12) %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs

cycle -1 (1) (9) %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs

cycle -1 (0) (7) %31:intregs = nsw A2_add %12:intregs, %13:intregs

cycle 0 (0) (0) %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1

cycle 0 (0) (1) %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1

cycle 0 (2) (13) %38:intregs = S2_lsr_i_r %37:intregs, 16

cycle 0 (1) (11) %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs

cycle 0 (0) (8) %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)

cycle 0 (0) (10) %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)

[stage 3 @-1c] %11:intregs = PHI %5:intregs, %bb.0, %19:intregs, %bb.1
[stage 0 @-1c] %12:intregs = PHI %0:intregs, %bb.0, %16:intregs, %bb.1
[stage 0 @-1c] %14:intregs = PHI %2:intregs, %bb.0, %17:intregs, %bb.1
[stage 0 @-1c] %13:intregs = PHI %1:intregs, %bb.0, %12:intregs, %bb.1
[stage 0 @-1c] %15:intregs = PHI %3:intregs, %bb.0, %14:intregs, %bb.1
[stage 3 @-1c] %19:intregs = S2_storerb_pi %11:intregs(tied-def 0), 1, %38:intregs :: (store 1 into %ir.lsr.iv, !tbaa !0)
[stage 2 @-1c] %37:intregs = nsw M4_mpyrr_addi 32768, %35:intregs, %36:intregs
[stage 1 @-1c] %33:intregs = nsw M2_acci %15:intregs(tied-def 0), %31:intregs, %16:intregs
[stage 0 @-1c] %31:intregs = nsw A2_add %12:intregs, %13:intregs
[stage 0 @0c] %8:intregs = PHI %7:intregs, %bb.0, %21:intregs, %bb.1
[stage 0 @0c] %9:intregs = PHI %6:intregs, %bb.0, %20:intregs, %bb.1
[stage 2 @0c] %38:intregs = S2_lsr_i_r %37:intregs, 16
[stage 1 @0c] %35:intregs = nsw M2_acci %17:intregs(tied-def 0), %33:intregs, %14:intregs
[stage 0 @0c] %16:intregs, %21:intregs = L2_loadrub_pi %8:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv8, !tbaa !0)
[stage 0 @0c] %17:intregs, %20:intregs = L2_loadrub_pi %9:intregs(tied-def 1), 1 :: (load 1 from %ir.lsr.iv5, !tbaa !0)
 -- padding defaults array from 2 to 3
 -- padding defaults array from 1 to 2
Dynamic: TC > 3
Dynamic: TC > 2
Dynamic: TC > 1
	.text
	.file	"<stdin>"
	.globl	test                            // -- Begin function test
	.p2align	4
	.type	test,@function
test:                                   // @test
// %bb.0:                               // %entry
	{
		r6 = add(r0,r3)
		r13 = add(r1,#-2)
		r7 = add(r0,#2)
		r15 = memub(r0+#1)
	}
	{
		r8 = add(r6,#2)
		r0 = #7282
		r1 = add(r4,#1)
		r5 = memub(r0+#0)
	}
	{
		r14 = add(r13,#-3)
		p0 = cmp.gtu(r13,#1)
		r3 = add(r15,r5)
		r2 = memub(r6+#1)
	}
	{
		if (!p0) jump:nt .LBB0_1
		r12 = memub(r7++#1)
		r4 = memub(r8++#1)
	}
// %bb.2:                               // %for.body75
	{
		r28 = r2
		r5 = r4
		p0 = cmp.gtu(r13,#2)
		r9 = memub(r7++#1)
	}
	{
		r28 += add(r3,r12)
		r3 = add(r12,r15)
		r6 = memub(r8++#1)
	}
	{
		r5 += add(r28,r2)
		if (!p0) jump:nt .LBB0_6
	}
// %bb.3:                               // %for.body75
	{
		r15 = add(##32768,mpyi(r5,r0))
		r2 += add(r3,r9)
		r5 = r6
	}
	{
		loop0(.LBB0_4,r14)
		r5 += add(r2,r4)
		p0 = cmp.gtu(r13,#3)
		r3 = add(r9,r12)
	}
	{
		r12 = lsr(r15,#16)
		r2 = r4
		r13 = memub(r7++#1)
		r14 = memub(r8++#1)
	}
	{
		if (!p0) jump:nt .LBB0_5
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_4:                                // %for.body75
                                        // =>This Inner Loop Header: Depth=1
	{
		r15 = add(##32768,mpyi(r5,r0))
		r4 += add(r3,r13)
		r2 = r6
	}
	{
		r5 = r14
		r6 = r14
		r3 = add(r13,r9)
		memb(r1++#1) = r12
	}
	{
		r5 += add(r4,r2)
		r12 = lsr(r15,#16)
		r9 = r13
		r13 = memub(r7++#1)
	}
	{
		r4 = r2
		r14 = memub(r8++#1)
	} :endloop0
.LBB0_5:                                // %for.body75
	{
		r4 = r6
		r9 = r13
		r6 = r14
		memb(r1++#1) = r12
	}
.LBB0_6:                                // %for.body75
	{
		r7 = add(##32768,mpyi(r5,r0))
		r5:4 = combine(r4,r6)
		r12 = r9
	}
	{
		r6 = lsr(r7,#16)
		jump .LBB0_7
		memb(r1++#1) = r6.new
	}
.LBB0_1:
	{
		r5 = r2
	}
.LBB0_7:                                // %for.body75
	{
		r2 += add(r3,r12)
	}
	{
		r4 += add(r2,r5)
	}
	{
		r0 = add(##32768,mpyi(r4,r0))
	}
	{
		r0 = lsr(r0,#16)
		jumpr r31
		memb(r1++#1) = r0.new
	}
.Lfunc_end0:
	.size	test, .Lfunc_end0-test
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
