
!!! Can not pipeline loop.
SU(0):   %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%0
    SU(2): Anti Latency=1
SU(1):   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(5): Data Latency=0 Reg=%1
    SU(5): Anti Latency=1
SU(2):   %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%0
    SU(0): Anti Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=%17
    SU(5): Ord  Latency=0 Memory
SU(3):   %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 0
  Height             : 1
  Successors:
    SU(4): Data Latency=1 Reg=%18
    SU(5): Anti Latency=0
SU(4):   %19:intregs = nsw A2_add %18:intregs, %17:intregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%18
    SU(2): Data Latency=1 Reg=%17
  Successors:
    SU(5): Data Latency=0 Reg=%19
SU(5):   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)
  # preds left       : 5
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%19
    SU(2): Ord  Latency=0 Memory
    SU(1): Data Latency=0 Reg=%1
    SU(1): Anti Latency=1
    SU(3): Anti Latency=0
ExitSU:   ENDLOOP0 %bb.1, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)
ReservedCycles:0, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %19:intregs = nsw A2_add %18:intregs, %17:intregs
ReservedCycles:1, NumCycles:1
Return Res MII:2
MII = 2 MAX_II = 12 (rec=1, res=2)
SU(1):   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
SU(3):   %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)
SU(0):   %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1
SU(2):   %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)
SU(4):   %19:intregs = nsw A2_add %18:intregs, %17:intregs
SU(5):   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 2
	Node 1:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 2:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 1
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 4:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 0
	   ZLH  = 1
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 2
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 0 depth 1 col 0
   SU(0) %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1
   SU(2) %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)

  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(1) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
   SU(5) %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

  Rec NodeSet Num nodes 3 rec 1 mov 0 depth 2 col 0
   SU(2) %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)
   SU(4) %19:intregs = nsw A2_add %18:intregs, %17:intregs
   SU(5) %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

  NodeSet Num nodes 3 rec 1 mov 0 depth 2 col 0
   SU(2) %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)
   SU(4) %19:intregs = nsw A2_add %18:intregs, %17:intregs
   SU(5) %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

  NodeSet Num nodes 1 rec 1 mov 0 depth 1 col 0
   SU(0) %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1

  NodeSet Num nodes 2 rec 1 mov 1 depth 2 col 0
   SU(1) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
   SU(3) %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)

NodeSet size 3
  Bottom up (default) 5 4 2 
   Switching order to top down 
Done with Nodeset
NodeSet size 1
  Top down (intersect) 0 
   Switching order to bottom up 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 3 1 
   Switching order to top down 
Done with Nodeset
Node order:  5  4  2  0  3  1 
Try to schedule with 2

Inst (5)   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

Inst (4)   %19:intregs = nsw A2_add %18:intregs, %17:intregs

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 0 II: 2
	insert at cycle 0   %19:intregs = nsw A2_add %18:intregs, %17:intregs

Inst (2)   %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)

	es: 80000000 ls: ffffffff me: 7fffffff ms:        0
	Can't schedule
Try to schedule with 3

Inst (5)   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 3 II: 3
	insert at cycle 1   %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

Inst (4)   %19:intregs = nsw A2_add %18:intregs, %17:intregs

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 0   %19:intregs = nsw A2_add %18:intregs, %17:intregs

Inst (2)   %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)

	es: 80000000 ls: ffffffff me: 7fffffff ms: ffffffff
Trying to insert node between -1 and -1 II: 3
	insert at cycle -1   %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)

Inst (0)   %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1

	es: fffffffd ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -1   %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1

Inst (3)   %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)

	es: 80000000 ls: ffffffff me: 7fffffff ms: 80000000
Trying to insert node between -1 and -3 II: 3
	insert at cycle -1   %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)

Inst (1)   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1

	es: ffffffff ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and -1 II: 3
	insert at cycle 1   %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1
Schedule Found? 1 (II=3)
cycle -1 (0) (0) %0:intregs = PHI %13:intregs, %bb.0, %5:intregs, %bb.1

cycle -1 (0) (2) %17:intregs, %5:intregs = L2_loadri_pi %0:intregs(tied-def 1), 4 :: (load (s32) from %ir.lsr.iv8, !tbaa !2)

cycle -1 (0) (3) %18:intregs = L2_loadri_io %1:intregs, 0 :: (load (s32) from %ir.lsr.iv6, !tbaa !2)

cycle 0 (0) (4) %19:intregs = nsw A2_add %18:intregs, %17:intregs

cycle 1 (0) (1) %1:intregs = PHI %12:intregs, %bb.0, %4:intregs, %bb.1

cycle 1 (0) (5) %4:intregs = S2_storeri_pi %1:intregs(tied-def 0), 4, %19:intregs :: (store (s32) into %ir.lsr.iv6, !tbaa !2)

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	foo                             // -- Begin function foo
	.p2align	4
	.type	foo,@function
foo:                                    // @foo
// %bb.0:                               // %entry
	{
		loop0(.LBB0_1,#10)
		r3 = r0
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_1:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	{
		r4 = memw(r3+#0)
		r5 = memw(r1++#4)
	}
	{
		r4 = add(r4,r5)
		memw(r3++#4) = r4.new
	} :endloop0
// %bb.2:
	{
		loop0(.LBB0_3,#10)
	}
	.p2align	4
.Ltmp1:                                 // Block address taken
.LBB0_3:                                // %for.body6
                                        // =>This Inner Loop Header: Depth=1
	{
		r1 = memw(r2+#0)
		r3 = memw(r0++#4)
	}
	{
		r1 = add(r1,r3)
		memw(r2++#4) = r1.new
	} :endloop0
// %bb.4:                               // %for.cond.cleanup5
	{
		r0 = #0
		jumpr r31
	}
.Lfunc_end0:
	.size	foo, .Lfunc_end0-foo
                                        // -- End function
	.ident	"clang version 11.0.0 (https://github.com/llvm/llvm-project.git 6e29846b29d2bcaa8a7a3d869f24f242bd93d272)"
	.section	".note.GNU-stack","",@progbits
