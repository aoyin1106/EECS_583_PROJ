SU(0):   %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2
  # preds left       : 0
  # succs left       : 4
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 1
  Successors:
    SU(6): Data Latency=0 Reg=%4
    SU(5): Data Latency=0 Reg=%4
    SU(3): Data Latency=0 Reg=%4
    SU(6): Anti Latency=1
SU(1):   %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2
  # preds left       : 0
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 2
  Successors:
    SU(2): Data Latency=0 Reg=%6
    SU(3): Anti Latency=1
SU(2):   %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2
  # preds left       : 1
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
  Predecessors:
    SU(1): Data Latency=0 Reg=%6
  Successors:
    SU(4): Data Latency=0 Reg=%7
SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)
  # preds left       : 2
  # succs left       : 2
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 1
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
    SU(1): Anti Latency=1
  Successors:
    SU(4): Data Latency=1 Reg=%8
    SU(5): Ord  Latency=1 Barrier
SU(4):   %16:intregs = nsw A2_sub %7:intregs, %8:intregs
  # preds left       : 2
  # succs left       : 1
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(3): Data Latency=1 Reg=%8
    SU(2): Data Latency=0 Reg=%7
  Successors:
    SU(5): Data Latency=0 Reg=%16
SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)
  # preds left       : 3
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 2
  Height             : 0
  Predecessors:
    SU(4): Data Latency=0 Reg=%16
    SU(0): Data Latency=0 Reg=%4
    SU(3): Ord  Latency=1 Barrier
SU(6):   %10:intregs = A2_addi %4:intregs, -4
  # preds left       : 2
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 1
  Depth              : 1
  Height             : 0
  Predecessors:
    SU(0): Data Latency=0 Reg=%4
    SU(0): Anti Latency=1
ExitSU:   ENDLOOP0 %bb.2, implicit-def $pc, implicit-def $lc0, implicit $sa0, implicit $lc0
  # preds left       : 0
  # succs left       : 0
  # rdefs left       : 0
  Latency            : 0
  Depth              : 0
  Height             : 0
calculateResMII:
Trying to reserve resource for 1 cycles for 
  %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %16:intregs = nsw A2_sub %7:intregs, %8:intregs
ReservedCycles:1, NumCycles:1
Trying to reserve resource for 1 cycles for 
  %10:intregs = A2_addi %4:intregs, -4
ReservedCycles:1, NumCycles:1
Return Res MII:1
MII = 2 MAX_II = 12 (rec=2, res=1)
SU(0):   %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2
SU(1):   %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2
SU(3):   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)
SU(2):   %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2
SU(4):   %16:intregs = nsw A2_sub %7:intregs, %8:intregs
SU(5):   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)
SU(6):   %10:intregs = A2_addi %4:intregs, -4
	Node 0:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 0
	   H    = 1
	   ZLD  = 0
	   ZLH  = 1
	Node 1:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 2
	   ZLD  = 0
	   ZLH  = 3
	Node 2:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 0
	   H    = 0
	   ZLD  = 1
	   ZLH  = 2
	Node 3:
	   ASAP = 0
	   ALAP = 0
	   MOV  = 0
	   D    = 1
	   H    = 1
	   ZLD  = 1
	   ZLH  = 0
	Node 4:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 2
	   ZLH  = 1
	Node 5:
	   ASAP = 1
	   ALAP = 1
	   MOV  = 0
	   D    = 2
	   H    = 0
	   ZLD  = 3
	   ZLH  = 0
	Node 6:
	   ASAP = 0
	   ALAP = 1
	   MOV  = 1
	   D    = 1
	   H    = 0
	   ZLD  = 1
	   ZLH  = 0
  Rec NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2
   SU(6) %10:intregs = A2_addi %4:intregs, -4

  Rec NodeSet Num nodes 3 rec 2 mov 0 depth 2 col 0
   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)
   SU(4) %16:intregs = nsw A2_sub %7:intregs, %8:intregs
   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)

  NodeSet Num nodes 3 rec 2 mov 0 depth 2 col 0
   SU(3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)
   SU(4) %16:intregs = nsw A2_sub %7:intregs, %8:intregs
   SU(5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)

  NodeSet Num nodes 2 rec 1 mov 1 depth 1 col 0
   SU(0) %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2
   SU(6) %10:intregs = A2_addi %4:intregs, -4

  NodeSet Num nodes 2 rec 0 mov 0 depth 0 col 0
   SU(1) %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2
   SU(2) %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2

NodeSet size 3
  Bottom up (default) 5 4 3 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (default) 6 0 
   Switching order to top down 
Done with Nodeset
NodeSet size 2
  Bottom up (preds) 2 1 
   Switching order to top down 
Done with Nodeset
Node order:  5  4  3  6  0  2  1 
Try to schedule with 2

Inst (5)   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 1 and 2 II: 2
	insert at cycle 1   S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)

Inst (4)   %16:intregs = nsw A2_sub %7:intregs, %8:intregs

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 0 II: 2
	insert at cycle 1   %16:intregs = nsw A2_sub %7:intregs, %8:intregs

Inst (3)   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)

	es: 80000000 ls:        0 me: 7fffffff ms:        0
Trying to insert node between 0 and 0 II: 2
	insert at cycle 0   %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)

Inst (6)   %10:intregs = A2_addi %4:intregs, -4

	es: 80000000 ls: 7fffffff me: 7fffffff ms: 80000000
Trying to insert node between 0 and 1 II: 2
	insert at cycle 0   %10:intregs = A2_addi %4:intregs, -4

Inst (0)   %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2

	es: ffffffff ls:        0 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2

Inst (2)   %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2

	es: 80000000 ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 1 and 0 II: 2
	insert at cycle 1   %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2

Inst (1)   %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2

	es: ffffffff ls:        1 me: 7fffffff ms: 80000000
Trying to insert node between 0 and -1 II: 2
	insert at cycle 0   %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2
Schedule Found? 1 (II=3)
cycle 0 (0) (0) %4:intregs = PHI %2:intregs, %bb.1, %10:intregs, %bb.2

cycle 0 (0) (1) %6:intregs = PHI %1:intregs, %bb.1, %8:intregs, %bb.2

cycle 0 (0) (3) %8:intregs = L2_loadri_io %4:intregs, -8 :: (load 4 from %ir.cgep5)

cycle 0 (0) (6) %10:intregs = A2_addi %4:intregs, -4

cycle 1 (0) (2) %7:intregs = PHI %3:intregs, %bb.1, %6:intregs, %bb.2

cycle 1 (0) (4) %16:intregs = nsw A2_sub %7:intregs, %8:intregs

cycle 1 (0) (5) S2_storeri_io %4:intregs, 0, %16:intregs :: (store 4 into %ir.lsr.iv)

No schedule found, return
	.text
	.file	"<stdin>"
	.globl	test1                           // -- Begin function test1
	.p2align	4
	.type	test1,@function
test1:                                  // @test1
	.cfi_startproc
// %bb.0:                               // %entry
	{
		r2 = add(r1,#-1)
	}
	{
		p0 = cmp.gt(r2,#1)
		if (!p0.new) jumpr:nt r31
	}
.LBB0_1:                                // %for.body.preheader
	{
		r3 = addasl(r0,r1,#2)
		r1 = addasl(r0,r2,#2)
		r4 = add(r2,#-1)
		r2 = memw(r0+r2<<#2)
	}
	{
		loop0(.LBB0_2,r4)
		r0 = memw(r3+#-8)
	}
	.p2align	4
.Ltmp0:                                 // Block address taken
.LBB0_2:                                // %for.body
                                        // =>This Inner Loop Header: Depth=1
	{
		r3 = r0
		r0 = memw(r1+#-8)
	}
	{
		r2 = sub(r2,r0)
		r1 = add(r1,#-4)
		memw(r1+#0) = r2.new
	}
	{
		r2 = r3
		nop
	} :endloop0
// %bb.3:                               // %for.end
	{
		jumpr r31
	}
.Lfunc_end0:
	.size	test1, .Lfunc_end0-test1
	.cfi_endproc
                                        // -- End function
	.section	".note.GNU-stack","",@progbits
